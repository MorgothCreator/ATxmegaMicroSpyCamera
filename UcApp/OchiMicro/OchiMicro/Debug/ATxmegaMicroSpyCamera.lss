
ATxmegaMicroSpyCamera.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00001c4c  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000062c  00802010  00802010  00001cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000360  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008f5d  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000193d  00000000  00000000  0000afdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000164e  00000000  00000000  0000c91a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cd4  00000000  00000000  0000df68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000202f  00000000  00000000  0000ec3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a54  00000000  00000000  00010c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  000156bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__dtors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_9>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_11>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_23>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      90:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      94:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a0:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_40>
      a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	12 80       	ldd	r1, Z+2	; 0x02
      ae:	29 00       	.word	0x0029	; ????
      b0:	12 12       	cpse	r1, r18
      b2:	13 7f       	andi	r17, 0xF3	; 243
      b4:	ff ff       	.word	0xffff	; ????

000000b6 <__ctors_start>:
      b6:	b6 0a       	sbc	r11, r22

000000b8 <__ctors_end>:
      b8:	18 0b       	sbc	r17, r24

000000ba <__dtors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	cd bf       	out	0x3d, r28	; 61
      c2:	df e2       	ldi	r29, 0x2F	; 47
      c4:	de bf       	out	0x3e, r29	; 62

000000c6 <__do_copy_data>:
      c6:	10 e2       	ldi	r17, 0x20	; 32
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b0 e2       	ldi	r27, 0x20	; 32
      cc:	ec e4       	ldi	r30, 0x4C	; 76
      ce:	fc e1       	ldi	r31, 0x1C	; 28
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a0 31       	cpi	r26, 0x10	; 16
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	26 e2       	ldi	r18, 0x26	; 38
      de:	a0 e1       	ldi	r26, 0x10	; 16
      e0:	b0 e2       	ldi	r27, 0x20	; 32
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ac 33       	cpi	r26, 0x3C	; 60
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	c8 eb       	ldi	r28, 0xB8	; 184
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	22 97       	sbiw	r28, 0x02	; 2
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 df 0c 	call	0x19be	; 0x19be <__tablejump__>
      fc:	c6 3b       	cpi	r28, 0xB6	; 182
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <main>
     106:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__do_global_dtors>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z20receive_char_servicePvc>:
 #include "io_usart.h"



void receive_char_service(void *structure, char data)
{
     10e:	08 95       	ret

00000110 <_ZN10Cmd_ParserC1EP8Io_Usart>:
	if(_cmd_parser->buff_cnt < sizeof(_cmd_parser->buffer));
}

Cmd_Parser::Cmd_Parser(Io_Usart *io_dev)
{
	this->io_dev = io_dev;
     110:	fc 01       	movw	r30, r24
     112:	62 a3       	std	Z+34, r22	; 0x22
     114:	73 a3       	std	Z+35, r23	; 0x23
	buff_cnt = 0;
     116:	10 a2       	std	Z+32, r1	; 0x20
     118:	11 a2       	std	Z+33, r1	; 0x21
	io_dev->rx_char_receive_func = receive_char_service;
     11a:	87 e8       	ldi	r24, 0x87	; 135
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	fb 01       	movw	r30, r22
     120:	84 83       	std	Z+4, r24	; 0x04
     122:	95 83       	std	Z+5, r25	; 0x05
     124:	08 95       	ret

00000126 <_ZN6SD_Spi10sd_io_dataEh>:
#include "io_spi.h"
#include "io_usart.h"

 //#######################################################################################
unsigned char SD_Spi::sd_io_data(unsigned char Value)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp = Value;
     130:	69 83       	std	Y+1, r22	; 0x01
	if(io_spi_port)
     132:	fc 01       	movw	r30, r24
     134:	26 81       	ldd	r18, Z+6	; 0x06
     136:	37 81       	ldd	r19, Z+7	; 0x07
     138:	21 15       	cp	r18, r1
     13a:	31 05       	cpc	r19, r1
     13c:	39 f0       	breq	.+14     	; 0x14c <_ZN6SD_Spi10sd_io_dataEh+0x26>
		io_spi_port->txrx_byte(&tmp);//usart_spi_data((Uart_t *)Struct, Value);
     13e:	be 01       	movw	r22, r28
     140:	6f 5f       	subi	r22, 0xFF	; 255
     142:	7f 4f       	sbci	r23, 0xFF	; 255
     144:	c9 01       	movw	r24, r18
     146:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN6Io_Spi9txrx_byteEPh>
     14a:	0a c0       	rjmp	.+20     	; 0x160 <_ZN6SD_Spi10sd_io_dataEh+0x3a>
	else if(io_usart_port)
     14c:	fc 01       	movw	r30, r24
     14e:	80 85       	ldd	r24, Z+8	; 0x08
     150:	91 85       	ldd	r25, Z+9	; 0x09
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	29 f0       	breq	.+10     	; 0x160 <_ZN6SD_Spi10sd_io_dataEh+0x3a>
		io_usart_port->txrx_byte(&tmp);//usart_spi_data((Uart_t *)Struct, Value);
     156:	be 01       	movw	r22, r28
     158:	6f 5f       	subi	r22, 0xFF	; 255
     15a:	7f 4f       	sbci	r23, 0xFF	; 255
     15c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN8Io_Usart9txrx_byteEPh>
	return tmp;
}
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <_ZN6SD_Spi12sd_cs_assertEv>:
	//Sysdelay(DelayMs);
}*/
//#######################################################################################
void SD_Spi::sd_cs_assert()
{
	if(io_spi_port)
     16a:	fc 01       	movw	r30, r24
     16c:	26 81       	ldd	r18, Z+6	; 0x06
     16e:	37 81       	ldd	r19, Z+7	; 0x07
     170:	21 15       	cp	r18, r1
     172:	31 05       	cpc	r19, r1
     174:	21 f0       	breq	.+8      	; 0x17e <_ZN6SD_Spi12sd_cs_assertEv+0x14>
		io_spi_port->cs_assert();
     176:	c9 01       	movw	r24, r18
     178:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN6Io_Spi9cs_assertEv>
     17c:	08 95       	ret
	else if(io_usart_port)
     17e:	fc 01       	movw	r30, r24
     180:	80 85       	ldd	r24, Z+8	; 0x08
     182:	91 85       	ldd	r25, Z+9	; 0x09
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	11 f0       	breq	.+4      	; 0x18c <_ZN6SD_Spi12sd_cs_assertEv+0x22>
		io_usart_port->cs_assert();
     188:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN8Io_Usart9cs_assertEv>
     18c:	08 95       	ret

0000018e <_ZN6SD_Spi14sd_cs_deassertEv>:
}
//#######################################################################################
void SD_Spi::sd_cs_deassert()
{
	if(io_spi_port)
     18e:	fc 01       	movw	r30, r24
     190:	26 81       	ldd	r18, Z+6	; 0x06
     192:	37 81       	ldd	r19, Z+7	; 0x07
     194:	21 15       	cp	r18, r1
     196:	31 05       	cpc	r19, r1
     198:	21 f0       	breq	.+8      	; 0x1a2 <_ZN6SD_Spi14sd_cs_deassertEv+0x14>
		io_spi_port->cs_deasert();
     19a:	c9 01       	movw	r24, r18
     19c:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN6Io_Spi10cs_deasertEv>
     1a0:	08 95       	ret
	else if(io_usart_port)
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 85       	ldd	r24, Z+8	; 0x08
     1a6:	91 85       	ldd	r25, Z+9	; 0x09
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <_ZN6SD_Spi14sd_cs_deassertEv+0x22>
		io_usart_port->cs_deasert();
     1ac:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN8Io_Usart10cs_deasertEv>
     1b0:	08 95       	ret

000001b2 <_ZN6SD_Spi10wait_readyEm>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
int SD_Spi::wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned long wt			/* Timeout [ms] */
)
{
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
     1c0:	6a 01       	movw	r12, r20
     1c2:	7b 01       	movw	r14, r22
	unsigned char d;

	unsigned long Timer2 = wt;
	do {
		d = sd_io_data(0xFF);
     1c4:	6f ef       	ldi	r22, 0xFF	; 255
     1c6:	ce 01       	movw	r24, r28
     1c8:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
		//_delay_ms(1);
	} while (d != 0xFF && Timer2--);	/* Wait for card goes ready or timeout */
     1cc:	8f 3f       	cpi	r24, 0xFF	; 255
     1ce:	69 f0       	breq	.+26     	; 0x1ea <_ZN6SD_Spi10wait_readyEm+0x38>
     1d0:	b7 01       	movw	r22, r14
     1d2:	a6 01       	movw	r20, r12
     1d4:	41 50       	subi	r20, 0x01	; 1
     1d6:	51 09       	sbc	r21, r1
     1d8:	61 09       	sbc	r22, r1
     1da:	71 09       	sbc	r23, r1
)
{
	unsigned char d;

	unsigned long Timer2 = wt;
	do {
     1dc:	cd 28       	or	r12, r13
     1de:	ce 28       	or	r12, r14
     1e0:	cf 28       	or	r12, r15
     1e2:	19 f0       	breq	.+6      	; 0x1ea <_ZN6SD_Spi10wait_readyEm+0x38>
		d = sd_io_data(0xFF);
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
		//_delay_ms(1);
	} while (d != 0xFF && Timer2--);	/* Wait for card goes ready or timeout */
     1e4:	6a 01       	movw	r12, r20
     1e6:	7b 01       	movw	r14, r22
     1e8:	ed cf       	rjmp	.-38     	; 0x1c4 <_ZN6SD_Spi10wait_readyEm+0x12>

	return (d == 0xFF) ? 1 : 0;
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	8f 3f       	cpi	r24, 0xFF	; 255
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <_ZN6SD_Spi10wait_readyEm+0x44>
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
}
     1f6:	c9 01       	movw	r24, r18
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	08 95       	ret

00000206 <_ZN6SD_Spi8deselectEv>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void SD_Spi::deselect ()
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24
	sd_cs_deassert();		/* CS = H */
     20c:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN6SD_Spi14sd_cs_deassertEv>
	sd_io_data(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     210:	6f ef       	ldi	r22, 0xFF	; 255
     212:	ce 01       	movw	r24, r28
     214:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <_ZN6SD_Spi7_selectEv>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

int SD_Spi::_select ()	/* 1:OK, 0:Timeout */
{
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
	sd_cs_assert();
     228:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN6SD_Spi12sd_cs_assertEv>
	sd_io_data(0xFF);	/* Dummy clock (force DO enabled) */
     22c:	6f ef       	ldi	r22, 0xFF	; 255
     22e:	ce 01       	movw	r24, r28
     230:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>

	if (wait_ready(50000))
     234:	40 e5       	ldi	r20, 0x50	; 80
     236:	53 ec       	ldi	r21, 0xC3	; 195
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN6SD_Spi10wait_readyEm>
     242:	8c 01       	movw	r16, r24
     244:	00 97       	sbiw	r24, 0x00	; 0
     246:	21 f4       	brne	.+8      	; 0x250 <_ZN6SD_Spi7_selectEv+0x32>
		return 1;	/* OK */
	deselect();
     248:	ce 01       	movw	r24, r28
     24a:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>
	return 0;	/* Timeout */
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_ZN6SD_Spi7_selectEv+0x36>
{
	sd_cs_assert();
	sd_io_data(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(50000))
		return 1;	/* OK */
     250:	01 e0       	ldi	r16, 0x01	; 1
     252:	10 e0       	ldi	r17, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
     254:	c8 01       	movw	r24, r16
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <_ZN6SD_Spi8send_cmdEhm>:

unsigned char SD_Spi::send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	unsigned char cmd,		/* Command index */
	unsigned long arg		/* Argument */
)
{
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	ec 01       	movw	r28, r24
     270:	16 2f       	mov	r17, r22
     272:	69 01       	movw	r12, r18
     274:	7a 01       	movw	r14, r20
	unsigned char n, res;


	if (cmd & 0x80)
     276:	66 23       	and	r22, r22
     278:	54 f4       	brge	.+20     	; 0x28e <_ZN6SD_Spi8send_cmdEhm+0x2e>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	67 e3       	ldi	r22, 0x37	; 55
     282:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
		if (res > 1) 
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	08 f0       	brcs	.+2      	; 0x28c <_ZN6SD_Spi8send_cmdEhm+0x2c>
     28a:	6a c0       	rjmp	.+212    	; 0x360 <_ZN6SD_Spi8send_cmdEhm+0x100>
	unsigned char n, res;


	if (cmd & 0x80)
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
     28c:	1f 77       	andi	r17, 0x7F	; 127
		if (res > 1) 
			return res;
	}

	/* Select card */
	if (cmd != CMD12) 
     28e:	1c 30       	cpi	r17, 0x0C	; 12
     290:	09 f4       	brne	.+2      	; 0x294 <_ZN6SD_Spi8send_cmdEhm+0x34>
     292:	3f c0       	rjmp	.+126    	; 0x312 <_ZN6SD_Spi8send_cmdEhm+0xb2>
	{
		deselect();
     294:	ce 01       	movw	r24, r28
     296:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>
		if (!_select())
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN6SD_Spi7_selectEv>
     2a0:	89 2b       	or	r24, r25
     2a2:	a9 f1       	breq	.+106    	; 0x30e <_ZN6SD_Spi8send_cmdEhm+0xae>
			return 0xFF;
	}

	/* Send command packet */
	sd_io_data(0x40 | cmd);				/* Start + command index */
     2a4:	61 2f       	mov	r22, r17
     2a6:	60 64       	ori	r22, 0x40	; 64
     2a8:	ce 01       	movw	r24, r28
     2aa:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 24));		/* Argument[31..24] */
     2ae:	6f 2d       	mov	r22, r15
     2b0:	77 27       	eor	r23, r23
     2b2:	88 27       	eor	r24, r24
     2b4:	99 27       	eor	r25, r25
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 16));		/* Argument[23..16] */
     2bc:	b7 01       	movw	r22, r14
     2be:	88 27       	eor	r24, r24
     2c0:	99 27       	eor	r25, r25
     2c2:	ce 01       	movw	r24, r28
     2c4:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 8));			/* Argument[15..8] */
     2c8:	99 27       	eor	r25, r25
     2ca:	8f 2d       	mov	r24, r15
     2cc:	7e 2d       	mov	r23, r14
     2ce:	6d 2d       	mov	r22, r13
     2d0:	ce 01       	movw	r24, r28
     2d2:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)arg);				/* Argument[7..0] */
     2d6:	6c 2d       	mov	r22, r12
     2d8:	ce 01       	movw	r24, r28
     2da:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0)
     2de:	11 23       	and	r17, r17
     2e0:	d1 f1       	breq	.+116    	; 0x356 <_ZN6SD_Spi8send_cmdEhm+0xf6>
		n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8)
     2e2:	18 30       	cpi	r17, 0x08	; 8
     2e4:	99 f1       	breq	.+102    	; 0x34c <_ZN6SD_Spi8send_cmdEhm+0xec>
		n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	sd_io_data(n);
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	ce 01       	movw	r24, r28
     2ea:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>

	/* Receive command resp */
	if (cmd == CMD12)
     2ee:	1c 30       	cpi	r17, 0x0C	; 12
     2f0:	21 f4       	brne	.+8      	; 0x2fa <_ZN6SD_Spi8send_cmdEhm+0x9a>
		sd_io_data(0xFF);	/* Diacard following one byte when CMD12 */
     2f2:	6f ef       	ldi	r22, 0xFF	; 255
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>

unsigned char SD_Spi::send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	unsigned char cmd,		/* Command index */
	unsigned long arg		/* Argument */
)
{
     2fa:	1f ef       	ldi	r17, 0xFF	; 255
	/* Receive command resp */
	if (cmd == CMD12)
		sd_io_data(0xFF);	/* Diacard following one byte when CMD12 */
	n = 255;								/* Wait for response (10 bytes max) */
	do
		res = sd_io_data(0xFF);
     2fc:	6f ef       	ldi	r22, 0xFF	; 255
     2fe:	ce 01       	movw	r24, r28
     300:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	while ((res & 0x80) && --n);
     304:	88 23       	and	r24, r24
     306:	64 f5       	brge	.+88     	; 0x360 <_ZN6SD_Spi8send_cmdEhm+0x100>
     308:	11 50       	subi	r17, 0x01	; 1

	/* Receive command resp */
	if (cmd == CMD12)
		sd_io_data(0xFF);	/* Diacard following one byte when CMD12 */
	n = 255;								/* Wait for response (10 bytes max) */
	do
     30a:	c1 f7       	brne	.-16     	; 0x2fc <_ZN6SD_Spi8send_cmdEhm+0x9c>
     30c:	29 c0       	rjmp	.+82     	; 0x360 <_ZN6SD_Spi8send_cmdEhm+0x100>
	/* Select card */
	if (cmd != CMD12) 
	{
		deselect();
		if (!_select())
			return 0xFF;
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	27 c0       	rjmp	.+78     	; 0x360 <_ZN6SD_Spi8send_cmdEhm+0x100>
	}

	/* Send command packet */
	sd_io_data(0x40 | cmd);				/* Start + command index */
     312:	6c e4       	ldi	r22, 0x4C	; 76
     314:	ce 01       	movw	r24, r28
     316:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 24));		/* Argument[31..24] */
     31a:	6f 2d       	mov	r22, r15
     31c:	77 27       	eor	r23, r23
     31e:	88 27       	eor	r24, r24
     320:	99 27       	eor	r25, r25
     322:	ce 01       	movw	r24, r28
     324:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 16));		/* Argument[23..16] */
     328:	b7 01       	movw	r22, r14
     32a:	88 27       	eor	r24, r24
     32c:	99 27       	eor	r25, r25
     32e:	ce 01       	movw	r24, r28
     330:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)(arg >> 8));			/* Argument[15..8] */
     334:	99 27       	eor	r25, r25
     336:	8f 2d       	mov	r24, r15
     338:	7e 2d       	mov	r23, r14
     33a:	6d 2d       	mov	r22, r13
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data((unsigned char)arg);				/* Argument[7..0] */
     342:	6c 2d       	mov	r22, r12
     344:	ce 01       	movw	r24, r28
     346:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     34a:	cd cf       	rjmp	.-102    	; 0x2e6 <_ZN6SD_Spi8send_cmdEhm+0x86>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0)
		n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8)
		n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	sd_io_data(n);
     34c:	67 e8       	ldi	r22, 0x87	; 135
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     354:	d2 cf       	rjmp	.-92     	; 0x2fa <_ZN6SD_Spi8send_cmdEhm+0x9a>
     356:	65 e9       	ldi	r22, 0x95	; 149
     358:	ce 01       	movw	r24, r28
     35a:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     35e:	cd cf       	rjmp	.-102    	; 0x2fa <_ZN6SD_Spi8send_cmdEhm+0x9a>
	do
		res = sd_io_data(0xFF);
	while ((res & 0x80) && --n);

	return res;							/* Return received response */
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <_ZN6SD_Spi15_mmcsd_spi_initEv>:

bool SD_Spi::_mmcsd_spi_init()
{
     370:	af 92       	push	r10
     372:	bf 92       	push	r11
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x16>
     386:	00 d0       	rcall	.+0      	; 0x388 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x18>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	8c 01       	movw	r16, r24
	if(io_spi_port)
     38e:	fc 01       	movw	r30, r24
     390:	86 81       	ldd	r24, Z+6	; 0x06
     392:	97 81       	ldd	r25, Z+7	; 0x07
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	29 f0       	breq	.+10     	; 0x3a2 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x32>
	{
		io_spi_port->set_baud(3);			/* Set slow clock */
     398:	63 e0       	ldi	r22, 0x03	; 3
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN6Io_Spi8set_baudEj>
     3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x44>
	}
	else if(io_usart_port)
     3a2:	f8 01       	movw	r30, r16
     3a4:	80 85       	ldd	r24, Z+8	; 0x08
     3a6:	91 85       	ldd	r25, Z+9	; 0x09
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x44>
	{
		io_usart_port->set_baud(80);			/* Set slow clock */
     3ac:	60 e5       	ldi	r22, 0x50	; 80
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN8Io_Usart8set_baudEj>
	}
	sd_cs_deassert();
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN6SD_Spi14sd_cs_deassertEv>
	unsigned char n, cmd, ty, ocr[4];
	SD_Hc = IsSd;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	f8 01       	movw	r30, r16
     3be:	81 83       	std	Z+1, r24	; 0x01
     3c0:	0f 2e       	mov	r0, r31
     3c2:	fe e0       	ldi	r31, 0x0E	; 14
     3c4:	ff 2e       	mov	r15, r31
     3c6:	f0 2d       	mov	r31, r0
	for (n = 14; n; n--)
		sd_io_data(0xFF);	/* Send 80 dummy clocks */
     3c8:	6f ef       	ldi	r22, 0xFF	; 255
     3ca:	c8 01       	movw	r24, r16
     3cc:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     3d0:	fa 94       	dec	r15
		io_usart_port->set_baud(80);			/* Set slow clock */
	}
	sd_cs_deassert();
	unsigned char n, cmd, ty, ocr[4];
	SD_Hc = IsSd;
	for (n = 14; n; n--)
     3d2:	d1 f7       	brne	.-12     	; 0x3c8 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x58>
		sd_io_data(0xFF);	/* Send 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1)
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	a9 01       	movw	r20, r18
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	c8 01       	movw	r24, r16
     3de:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x78>
     3e6:	cb c0       	rjmp	.+406    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
	{			/* Put the card SPI/Idle state */
		unsigned long Timer1 = 100000;						/* Initialization timeout = 1 sec */
		if (send_cmd(CMD8, 0x1AA) == 1)
     3e8:	2a ea       	ldi	r18, 0xAA	; 170
     3ea:	31 e0       	ldi	r19, 0x01	; 1
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	68 e0       	ldi	r22, 0x08	; 8
     3f2:	c8 01       	movw	r24, r16
     3f4:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	09 f0       	breq	.+2      	; 0x3fe <_ZN6SD_Spi15_mmcsd_spi_initEv+0x8e>
     3fc:	57 c0       	rjmp	.+174    	; 0x4ac <_ZN6SD_Spi15_mmcsd_spi_initEv+0x13c>
     3fe:	5e 01       	movw	r10, r28
     400:	f5 e0       	ldi	r31, 0x05	; 5
     402:	af 0e       	add	r10, r31
     404:	b1 1c       	adc	r11, r1
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	7c 01       	movw	r14, r24
		{	/* SDv2? */
			for (n = 0; n < 4; n++) 
				ocr[n] = sd_io_data(0xFF);	/* Get 32 bit return value of R7 resp */
     40c:	6f ef       	ldi	r22, 0xFF	; 255
     40e:	c8 01       	movw	r24, r16
     410:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     414:	f7 01       	movw	r30, r14
     416:	81 93       	st	Z+, r24
     418:	7f 01       	movw	r14, r30
	if (send_cmd(CMD0, 0) == 1)
	{			/* Put the card SPI/Idle state */
		unsigned long Timer1 = 100000;						/* Initialization timeout = 1 sec */
		if (send_cmd(CMD8, 0x1AA) == 1)
		{	/* SDv2? */
			for (n = 0; n < 4; n++) 
     41a:	ea 15       	cp	r30, r10
     41c:	fb 05       	cpc	r31, r11
     41e:	b1 f7       	brne	.-20     	; 0x40c <_ZN6SD_Spi15_mmcsd_spi_initEv+0x9c>
				ocr[n] = sd_io_data(0xFF);	/* Get 32 bit return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	09 f0       	breq	.+2      	; 0x428 <_ZN6SD_Spi15_mmcsd_spi_initEv+0xb8>
     426:	ab c0       	rjmp	.+342    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	8a 3a       	cpi	r24, 0xAA	; 170
     42c:	09 f0       	breq	.+2      	; 0x430 <_ZN6SD_Spi15_mmcsd_spi_initEv+0xc0>
     42e:	a7 c0       	rjmp	.+334    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
			{				/* Is the card supports vcc of 2.7-3.6V? */
				while (Timer1-- && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
     430:	0f 2e       	mov	r0, r31
     432:	ff e9       	ldi	r31, 0x9F	; 159
     434:	cf 2e       	mov	r12, r31
     436:	f6 e8       	ldi	r31, 0x86	; 134
     438:	df 2e       	mov	r13, r31
     43a:	ee 24       	eor	r14, r14
     43c:	e3 94       	inc	r14
     43e:	f1 2c       	mov	r15, r1
     440:	f0 2d       	mov	r31, r0
     442:	0b c0       	rjmp	.+22     	; 0x45a <_ZN6SD_Spi15_mmcsd_spi_initEv+0xea>
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	cf 1a       	sub	r12, r31
     448:	d1 08       	sbc	r13, r1
     44a:	e1 08       	sbc	r14, r1
     44c:	f1 08       	sbc	r15, r1
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	c8 16       	cp	r12, r24
     452:	d8 06       	cpc	r13, r24
     454:	e8 06       	cpc	r14, r24
     456:	f8 06       	cpc	r15, r24
     458:	79 f0       	breq	.+30     	; 0x478 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x108>
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e4       	ldi	r21, 0x40	; 64
     462:	69 ea       	ldi	r22, 0xA9	; 169
     464:	c8 01       	movw	r24, r16
     466:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     46a:	81 11       	cpse	r24, r1
     46c:	eb cf       	rjmp	.-42     	; 0x444 <_ZN6SD_Spi15_mmcsd_spi_initEv+0xd4>
				if (Timer1 && send_cmd(CMD58, 0) == 0)
     46e:	cd 28       	or	r12, r13
     470:	ce 28       	or	r12, r14
     472:	cf 28       	or	r12, r15
     474:	09 f4       	brne	.+2      	; 0x478 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x108>
     476:	83 c0       	rjmp	.+262    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a9 01       	movw	r20, r18
     47e:	6a e3       	ldi	r22, 0x3A	; 58
     480:	c8 01       	movw	r24, r16
     482:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     486:	81 11       	cpse	r24, r1
     488:	7a c0       	rjmp	.+244    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
     48a:	fe 01       	movw	r30, r28
     48c:	31 96       	adiw	r30, 0x01	; 1
     48e:	7f 01       	movw	r14, r30
				{		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = sd_io_data(0xFF);
     490:	6f ef       	ldi	r22, 0xFF	; 255
     492:	c8 01       	movw	r24, r16
     494:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
     498:	f7 01       	movw	r30, r14
     49a:	81 93       	st	Z+, r24
     49c:	7f 01       	movw	r14, r30
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
			{				/* Is the card supports vcc of 2.7-3.6V? */
				while (Timer1-- && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
				if (Timer1 && send_cmd(CMD58, 0) == 0)
				{		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
     49e:	ea 15       	cp	r30, r10
     4a0:	fb 05       	cpc	r31, r11
     4a2:	b1 f7       	brne	.-20     	; 0x490 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x120>
						ocr[n] = sd_io_data(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	86 fd       	sbrc	r24, 6
     4a8:	66 c0       	rjmp	.+204    	; 0x576 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x206>
     4aa:	6d c0       	rjmp	.+218    	; 0x586 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x216>
					if(ty & CT_BLOCK)
						SD_Hc = IsSdhc;
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1)
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	a9 01       	movw	r20, r18
     4b2:	69 ea       	ldi	r22, 0xA9	; 169
     4b4:	c8 01       	movw	r24, r16
     4b6:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	40 f4       	brcc	.+16     	; 0x4ce <_ZN6SD_Spi15_mmcsd_spi_initEv+0x15e>
			{	/* SDv1 or MMC? */
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
     4be:	68 94       	set
     4c0:	aa 24       	eor	r10, r10
     4c2:	a1 f8       	bld	r10, 1
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f9 ea       	ldi	r31, 0xA9	; 169
     4c8:	bf 2e       	mov	r11, r31
     4ca:	f0 2d       	mov	r31, r0
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x166>
			} else
			{
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
     4ce:	aa 24       	eor	r10, r10
     4d0:	a3 94       	inc	r10
     4d2:	bb 24       	eor	r11, r11
     4d4:	b3 94       	inc	r11
			}
			while (Timer1-- && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
     4d6:	0f 2e       	mov	r0, r31
     4d8:	ff e9       	ldi	r31, 0x9F	; 159
     4da:	cf 2e       	mov	r12, r31
     4dc:	f6 e8       	ldi	r31, 0x86	; 134
     4de:	df 2e       	mov	r13, r31
     4e0:	ee 24       	eor	r14, r14
     4e2:	e3 94       	inc	r14
     4e4:	f1 2c       	mov	r15, r1
     4e6:	f0 2d       	mov	r31, r0
     4e8:	0b c0       	rjmp	.+22     	; 0x500 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x190>
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	cf 1a       	sub	r12, r31
     4ee:	d1 08       	sbc	r13, r1
     4f0:	e1 08       	sbc	r14, r1
     4f2:	f1 08       	sbc	r15, r1
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	c8 16       	cp	r12, r24
     4f8:	d8 06       	cpc	r13, r24
     4fa:	e8 06       	cpc	r14, r24
     4fc:	f8 06       	cpc	r15, r24
     4fe:	69 f0       	breq	.+26     	; 0x51a <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1aa>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	6b 2d       	mov	r22, r11
     508:	c8 01       	movw	r24, r16
     50a:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     50e:	81 11       	cpse	r24, r1
     510:	ec cf       	rjmp	.-40     	; 0x4ea <_ZN6SD_Spi15_mmcsd_spi_initEv+0x17a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
     512:	cd 28       	or	r12, r13
     514:	ce 28       	or	r12, r14
     516:	cf 28       	or	r12, r15
     518:	91 f1       	breq	.+100    	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	32 e0       	ldi	r19, 0x02	; 2
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e1       	ldi	r22, 0x10	; 16
     524:	c8 01       	movw	r24, r16
     526:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     52a:	81 11       	cpse	r24, r1
     52c:	28 c0       	rjmp	.+80     	; 0x57e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x20e>
				ty = 0;
		}
	}
	deselect();
     52e:	c8 01       	movw	r24, r16
     530:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>

	if (ty)
     534:	aa 20       	and	r10, r10
     536:	b9 f0       	breq	.+46     	; 0x566 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1f6>
	{			/* OK */
		if(io_spi_port)
     538:	f8 01       	movw	r30, r16
     53a:	86 81       	ldd	r24, Z+6	; 0x06
     53c:	97 81       	ldd	r25, Z+7	; 0x07
     53e:	00 97       	sbiw	r24, 0x00	; 0
     540:	29 f0       	breq	.+10     	; 0x54c <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1dc>
		{
			io_spi_port->set_baud(1);			/* Set fast clock */
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN6Io_Spi8set_baudEj>
     54a:	09 c0       	rjmp	.+18     	; 0x55e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1ee>
		}
		else if(io_usart_port)
     54c:	f8 01       	movw	r30, r16
     54e:	80 85       	ldd	r24, Z+8	; 0x08
     550:	91 85       	ldd	r25, Z+9	; 0x09
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	21 f0       	breq	.+8      	; 0x55e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1ee>
		{
			io_usart_port->set_baud(1);			/* Set fast clock */
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN8Io_Usart8set_baudEj>
		}
		SD_Init_OK = true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	f8 01       	movw	r30, r16
     562:	80 83       	st	Z, r24
     564:	02 c0       	rjmp	.+4      	; 0x56a <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1fa>
	} else
	{			/* Failed */
		//power_off();
		SD_Init_OK = false;
     566:	f8 01       	movw	r30, r16
     568:	10 82       	st	Z, r1
	}

	//return Stat;

	//SD_Struct->HardUnitSetBaudFunc((void *)SD_Struct->HardUnitStruct, 4000000);
	sd_cs_deassert();
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN6SD_Spi14sd_cs_deassertEv>
	return SD_Init_OK;
     570:	f8 01       	movw	r30, r16
     572:	80 81       	ld	r24, Z
     574:	0c c0       	rjmp	.+24     	; 0x58e <_ZN6SD_Spi15_mmcsd_spi_initEv+0x21e>
				{		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
						ocr[n] = sd_io_data(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
					if(ty & CT_BLOCK)
						SD_Hc = IsSdhc;
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	f8 01       	movw	r30, r16
     57a:	81 83       	std	Z+1, r24	; 0x01
     57c:	04 c0       	rjmp	.+8      	; 0x586 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x216>
			while (Timer1-- && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	deselect();
     57e:	c8 01       	movw	r24, r16
     580:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>
     584:	f0 cf       	rjmp	.-32     	; 0x566 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1f6>
     586:	c8 01       	movw	r24, r16
     588:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>
     58c:	d5 cf       	rjmp	.-86     	; 0x538 <_ZN6SD_Spi15_mmcsd_spi_initEv+0x1c8>
	//return Stat;

	//SD_Struct->HardUnitSetBaudFunc((void *)SD_Struct->HardUnitStruct, 4000000);
	sd_cs_deassert();
	return SD_Init_OK;
}
     58e:	24 96       	adiw	r28, 0x04	; 4
     590:	cd bf       	out	0x3d, r28	; 61
     592:	de bf       	out	0x3e, r29	; 62
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	08 95       	ret

000005aa <_ZN6SD_Spi14rcvr_datablockEPhj>:

//#######################################################################################
bool SD_Spi::rcvr_datablock(unsigned char *buff, unsigned int bytes_to_read)
{
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	7b 01       	movw	r14, r22
     5ba:	8a 01       	movw	r16, r20
	unsigned char token;
	//unsigned char Timer1 = 10;
	do
	{							/* Wait for data packet in timeout of 100ms */
		token = sd_io_data(255);
     5bc:	6f ef       	ldi	r22, 0xFF	; 255
     5be:	ce 01       	movw	r24, r28
     5c0:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
//#######################################################################################
bool SD_Spi::rcvr_datablock(unsigned char *buff, unsigned int bytes_to_read)
{
	unsigned char token;
	//unsigned char Timer1 = 10;
	do
     5c4:	8f 3f       	cpi	r24, 0xFF	; 255
     5c6:	d1 f3       	breq	.-12     	; 0x5bc <_ZN6SD_Spi14rcvr_datablockEPhj+0x12>
	{							/* Wait for data packet in timeout of 100ms */
		token = sd_io_data(255);
	} while ((token == 0xFF)/* && Timer1--*/);

	if(token != MMC_DATA_TOKEN)
     5c8:	8e 3f       	cpi	r24, 0xFE	; 254
     5ca:	09 f5       	brne	.+66     	; 0x60e <_ZN6SD_Spi14rcvr_datablockEPhj+0x64>

	//do
	//{							/* Receive the data block into buffer */
	//	*buff++ = sd_io_data(255);
	//} while (--bytes_to_read);
	if(io_spi_port)
     5cc:	ee 81       	ldd	r30, Y+6	; 0x06
     5ce:	ff 81       	ldd	r31, Y+7	; 0x07
     5d0:	30 97       	sbiw	r30, 0x00	; 0
     5d2:	41 f0       	breq	.+16     	; 0x5e4 <_ZN6SD_Spi14rcvr_datablockEPhj+0x3a>
	{
		io_spi_port->spim_buff = buff;
     5d4:	e3 86       	std	Z+11, r14	; 0x0b
     5d6:	f4 86       	std	Z+12, r15	; 0x0c
		io_spi_port->rx_buff(bytes_to_read);
     5d8:	b8 01       	movw	r22, r16
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	9f 81       	ldd	r25, Y+7	; 0x07
     5de:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN6Io_Spi7rx_buffEj>
     5e2:	0b c0       	rjmp	.+22     	; 0x5fa <_ZN6SD_Spi14rcvr_datablockEPhj+0x50>
	}
	else if(io_usart_port)
     5e4:	e8 85       	ldd	r30, Y+8	; 0x08
     5e6:	f9 85       	ldd	r31, Y+9	; 0x09
     5e8:	30 97       	sbiw	r30, 0x00	; 0
     5ea:	39 f0       	breq	.+14     	; 0x5fa <_ZN6SD_Spi14rcvr_datablockEPhj+0x50>
	{
		io_usart_port->spim_buff = buff;
     5ec:	e3 8e       	std	Z+27, r14	; 0x1b
     5ee:	f4 8e       	std	Z+28, r15	; 0x1c
		io_usart_port->rx_buff(bytes_to_read);
     5f0:	b8 01       	movw	r22, r16
     5f2:	88 85       	ldd	r24, Y+8	; 0x08
     5f4:	99 85       	ldd	r25, Y+9	; 0x09
     5f6:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN8Io_Usart7rx_buffEj>
	}

	sd_io_data(255);						/* Discard CRC */
     5fa:	6f ef       	ldi	r22, 0xFF	; 255
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>
	sd_io_data(255);
     602:	6f ef       	ldi	r22, 0xFF	; 255
     604:	ce 01       	movw	r24, r28
     606:	0e 94 93 00 	call	0x126	; 0x126 <_ZN6SD_Spi10sd_io_dataEh>

	return true;					/* Return with success */
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	01 c0       	rjmp	.+2      	; 0x610 <_ZN6SD_Spi14rcvr_datablockEPhj+0x66>
	{							/* Wait for data packet in timeout of 100ms */
		token = sd_io_data(255);
	} while ((token == 0xFF)/* && Timer1--*/);

	if(token != MMC_DATA_TOKEN)
		return false;	/* If not valid data token, return with error */
     60e:	80 e0       	ldi	r24, 0x00	; 0

	sd_io_data(255);						/* Discard CRC */
	sd_io_data(255);

	return true;					/* Return with success */
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <_ZN6SD_Spi13_sd_read_pageEPhmj>:
//#######################################################################################
unsigned int SD_Spi::_sd_read_page(unsigned char *_Buffer, unsigned long block, unsigned int nblks)
{
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	5c 01       	movw	r10, r24
     634:	eb 01       	movw	r28, r22
     636:	69 01       	movw	r12, r18
     638:	7a 01       	movw	r14, r20
	if (/*drv || */!nblks) 
     63a:	01 15       	cp	r16, r1
     63c:	11 05       	cpc	r17, r1
     63e:	09 f4       	brne	.+2      	; 0x642 <_ZN6SD_Spi13_sd_read_pageEPhmj+0x24>
     640:	52 c0       	rjmp	.+164    	; 0x6e6 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xc8>
		return false;		/* Check parameter */
	if (SD_Init_OK == false) 
     642:	fc 01       	movw	r30, r24
     644:	80 81       	ld	r24, Z
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <_ZN6SD_Spi13_sd_read_pageEPhmj+0x2e>
     64a:	50 c0       	rjmp	.+160    	; 0x6ec <_ZN6SD_Spi13_sd_read_pageEPhmj+0xce>
		return false;	/* Check if drive is ready */

	if (SD_Hc == IsSd)
     64c:	81 81       	ldd	r24, Z+1	; 0x01
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	49 f4       	brne	.+18     	; 0x664 <_ZN6SD_Spi13_sd_read_pageEPhmj+0x46>
		block *= 512;	/* LBA ot BA conversion (byte addressing cards) */
     652:	0b 2e       	mov	r0, r27
     654:	b9 e0       	ldi	r27, 0x09	; 9
     656:	cc 0c       	add	r12, r12
     658:	dd 1c       	adc	r13, r13
     65a:	ee 1c       	adc	r14, r14
     65c:	ff 1c       	adc	r15, r15
     65e:	ba 95       	dec	r27
     660:	d1 f7       	brne	.-12     	; 0x656 <_ZN6SD_Spi13_sd_read_pageEPhmj+0x38>
     662:	b0 2d       	mov	r27, r0

	if (nblks == 1)
     664:	01 30       	cpi	r16, 0x01	; 1
     666:	11 05       	cpc	r17, r1
     668:	99 f4       	brne	.+38     	; 0x690 <_ZN6SD_Spi13_sd_read_pageEPhmj+0x72>
	{	/* Single sector read */
		if ((send_cmd(CMD17, block) == 0)	/* READ_SINGLE_BLOCK */
     66a:	a7 01       	movw	r20, r14
     66c:	96 01       	movw	r18, r12
     66e:	61 e1       	ldi	r22, 0x11	; 17
     670:	c5 01       	movw	r24, r10
     672:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
			&& rcvr_datablock(_Buffer, 512))
     676:	81 11       	cpse	r24, r1
     678:	2d c0       	rjmp	.+90     	; 0x6d4 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xb6>
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	52 e0       	ldi	r21, 0x02	; 2
     67e:	be 01       	movw	r22, r28
     680:	c5 01       	movw	r24, r10
     682:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN6SD_Spi14rcvr_datablockEPhj>
	if (SD_Hc == IsSd)
		block *= 512;	/* LBA ot BA conversion (byte addressing cards) */

	if (nblks == 1)
	{	/* Single sector read */
		if ((send_cmd(CMD17, block) == 0)	/* READ_SINGLE_BLOCK */
     686:	01 e0       	ldi	r16, 0x01	; 1
     688:	80 27       	eor	r24, r16
			&& rcvr_datablock(_Buffer, 512))
			nblks = 0;
     68a:	08 2f       	mov	r16, r24
     68c:	10 e0       	ldi	r17, 0x00	; 0
     68e:	22 c0       	rjmp	.+68     	; 0x6d4 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xb6>
	}
	else
	{				/* Multiple sector read */
		if (send_cmd(CMD18, block) == 0)
     690:	a7 01       	movw	r20, r14
     692:	96 01       	movw	r18, r12
     694:	62 e1       	ldi	r22, 0x12	; 18
     696:	c5 01       	movw	r24, r10
     698:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
     69c:	81 11       	cpse	r24, r1
     69e:	1a c0       	rjmp	.+52     	; 0x6d4 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xb6>
		{	/* READ_MULTIPLE_BLOCK */
			do
			{
				if (!rcvr_datablock(_Buffer, 512)) break;
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	52 e0       	ldi	r21, 0x02	; 2
     6a4:	be 01       	movw	r22, r28
     6a6:	c5 01       	movw	r24, r10
     6a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN6SD_Spi14rcvr_datablockEPhj>
     6ac:	88 23       	and	r24, r24
     6ae:	59 f0       	breq	.+22     	; 0x6c6 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xa8>
				_Buffer += 512;
     6b0:	de 5f       	subi	r29, 0xFE	; 254
	}
	else
	{				/* Multiple sector read */
		if (send_cmd(CMD18, block) == 0)
		{	/* READ_MULTIPLE_BLOCK */
			do
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	cf 1a       	sub	r12, r31
     6b6:	d1 08       	sbc	r13, r1
     6b8:	e1 08       	sbc	r14, r1
     6ba:	f1 08       	sbc	r15, r1
     6bc:	c1 14       	cp	r12, r1
     6be:	d1 04       	cpc	r13, r1
     6c0:	e1 04       	cpc	r14, r1
     6c2:	f1 04       	cpc	r15, r1
     6c4:	69 f7       	brne	.-38     	; 0x6a0 <_ZN6SD_Spi13_sd_read_pageEPhmj+0x82>
			{
				if (!rcvr_datablock(_Buffer, 512)) break;
				_Buffer += 512;
			} while (--block);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	6c e0       	ldi	r22, 0x0C	; 12
     6ce:	c5 01       	movw	r24, r10
     6d0:	0e 94 30 01 	call	0x260	; 0x260 <_ZN6SD_Spi8send_cmdEhm>
		}
	}
	deselect();
     6d4:	c5 01       	movw	r24, r10
     6d6:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6SD_Spi8deselectEv>
	return nblks ? false : true;	/* Return result */
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	01 2b       	or	r16, r17
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xd2>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xd2>
}
//#######################################################################################
unsigned int SD_Spi::_sd_read_page(unsigned char *_Buffer, unsigned long block, unsigned int nblks)
{
	if (/*drv || */!nblks) 
		return false;		/* Check parameter */
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <_ZN6SD_Spi13_sd_read_pageEPhmj+0xd2>
	if (SD_Init_OK == false) 
		return false;	/* Check if drive is ready */
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
	return nblks ? false : true;	/* Return result */
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	08 95       	ret

00000706 <_ZN6SD_Spi4readEPhmj>:
//#######################################################################################
unsigned int SD_Spi::read(unsigned char *_Buffer, unsigned long _block, unsigned int nblks)
{
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	7c 01       	movw	r14, r24
     720:	eb 01       	movw	r28, r22
     722:	68 01       	movw	r12, r16
	unsigned long block = _block;
	unsigned char* Buffer = (unsigned char*)_Buffer;
	//unsigned int TransferedBlocks = 0;
	do
	{
		if(!_sd_read_page(Buffer/* + (512*TransferedBlocks)*/, block++, 1)) return false;
     724:	49 01       	movw	r8, r18
     726:	5a 01       	movw	r10, r20
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	88 1a       	sub	r8, r24
     72c:	98 0a       	sbc	r9, r24
     72e:	a8 0a       	sbc	r10, r24
     730:	b8 0a       	sbc	r11, r24
     732:	01 e0       	ldi	r16, 0x01	; 1
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	be 01       	movw	r22, r28
     738:	c7 01       	movw	r24, r14
     73a:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN6SD_Spi13_sd_read_pageEPhmj>
     73e:	00 97       	sbiw	r24, 0x00	; 0
     740:	61 f0       	breq	.+24     	; 0x75a <_ZN6SD_Spi4readEPhmj+0x54>
		Buffer += 512;
     742:	de 5f       	subi	r29, 0xFE	; 254
unsigned int SD_Spi::read(unsigned char *_Buffer, unsigned long _block, unsigned int nblks)
{
	unsigned long block = _block;
	unsigned char* Buffer = (unsigned char*)_Buffer;
	//unsigned int TransferedBlocks = 0;
	do
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	c8 1a       	sub	r12, r24
     748:	d1 08       	sbc	r13, r1
     74a:	c1 14       	cp	r12, r1
     74c:	d1 04       	cpc	r13, r1
     74e:	19 f0       	breq	.+6      	; 0x756 <_ZN6SD_Spi4readEPhmj+0x50>
	{
		if(!_sd_read_page(Buffer/* + (512*TransferedBlocks)*/, block++, 1)) return false;
     750:	a5 01       	movw	r20, r10
     752:	94 01       	movw	r18, r8
     754:	e7 cf       	rjmp	.-50     	; 0x724 <_ZN6SD_Spi4readEPhmj+0x1e>
		Buffer += 512;
		//TransferedBlocks++;
	} while (--nblks);
	return true;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	08 95       	ret

00000774 <_ZN6SD_SpiC1EP6Io_SpiP8Io_Usart>:
	return true;
}
//#######################################################################################
SD_Spi::SD_Spi(Io_Spi *io_port, Io_Usart *io_usart_port)
{
	this->io_spi_port = io_port;
     774:	fc 01       	movw	r30, r24
     776:	66 83       	std	Z+6, r22	; 0x06
     778:	77 83       	std	Z+7, r23	; 0x07
	this->io_usart_port = io_usart_port;
     77a:	40 87       	std	Z+8, r20	; 0x08
     77c:	51 87       	std	Z+9, r21	; 0x09
	_mmcsd_spi_init();
     77e:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN6SD_Spi15_mmcsd_spi_initEv>
     782:	08 95       	ret

00000784 <_ZN3DmaC1Ev>:
#include <avr/io.h>
#include "dma.h"

Dma::Dma()
{
	EDMA.CTRL = EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
     784:	e0 e0       	ldi	r30, 0x00	; 0
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	80 e2       	ldi	r24, 0x20	; 32
     78a:	80 83       	st	Z, r24
	EDMA.CTRL |= EDMA_ENABLE_bm;
     78c:	80 81       	ld	r24, Z
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 83       	st	Z, r24
     792:	08 95       	ret

00000794 <_ZN6Io_Spi9txrx_byteEPh>:
	return true;
}

bool Io_Spi::txrx_byte(unsigned char *data)
{
	volatile SPI_t* port = this->base_addr;
     794:	dc 01       	movw	r26, r24
     796:	ed 91       	ld	r30, X+
     798:	fc 91       	ld	r31, X
	/* Start transmission */
	port->DATA = *data;
     79a:	db 01       	movw	r26, r22
     79c:	8c 91       	ld	r24, X
     79e:	83 83       	std	Z+3, r24	; 0x03
	/* Wait for transmission complete */
	while(!(port->STATUS & SPI_IF_bm)) { }
     7a0:	82 81       	ldd	r24, Z+2	; 0x02
     7a2:	88 23       	and	r24, r24
     7a4:	ec f7       	brge	.-6      	; 0x7a0 <_ZN6Io_Spi9txrx_byteEPh+0xc>
	*data = port->DATA;
     7a6:	83 81       	ldd	r24, Z+3	; 0x03
     7a8:	fb 01       	movw	r30, r22
     7aa:	80 83       	st	Z, r24
	return true;
}
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	08 95       	ret

000007b0 <_ZN6Io_Spi7rx_buffEj>:
	this->cs_port->OUTSET = this->cs_pin_mask;
	return true;
}

bool Io_Spi::rx_buff(unsigned int BytesReceive)
{
     7b0:	7f 92       	push	r7
     7b2:	8f 92       	push	r8
     7b4:	9f 92       	push	r9
     7b6:	af 92       	push	r10
     7b8:	bf 92       	push	r11
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	8c 01       	movw	r16, r24
	if(!spim_buff)
     7d2:	dc 01       	movw	r26, r24
     7d4:	1b 96       	adiw	r26, 0x0b	; 11
     7d6:	8d 91       	ld	r24, X+
     7d8:	9c 91       	ld	r25, X
     7da:	1c 97       	sbiw	r26, 0x0c	; 12
     7dc:	89 2b       	or	r24, r25
     7de:	09 f4       	brne	.+2      	; 0x7e2 <_ZN6Io_Spi7rx_buffEj+0x32>
     7e0:	b2 c0       	rjmp	.+356    	; 0x946 <_ZN6Io_Spi7rx_buffEj+0x196>
		return false;
	if(control_cs_pin)
     7e2:	1d 96       	adiw	r26, 0x0d	; 13
     7e4:	8c 91       	ld	r24, X
     7e6:	1d 97       	sbiw	r26, 0x0d	; 13
     7e8:	88 23       	and	r24, r24
     7ea:	39 f0       	breq	.+14     	; 0x7fa <_ZN6Io_Spi7rx_buffEj+0x4a>
		cs_port->OUTCLR = this->cs_pin_mask;
     7ec:	15 96       	adiw	r26, 0x05	; 5
     7ee:	ed 91       	ld	r30, X+
     7f0:	fc 91       	ld	r31, X
     7f2:	16 97       	sbiw	r26, 0x06	; 6
     7f4:	14 96       	adiw	r26, 0x04	; 4
     7f6:	8c 91       	ld	r24, X
     7f8:	86 83       	std	Z+6, r24	; 0x06
	if(!dmarx)
     7fa:	d8 01       	movw	r26, r16
     7fc:	17 96       	adiw	r26, 0x07	; 7
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	18 97       	sbiw	r26, 0x08	; 8
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	61 f5       	brne	.+88     	; 0x860 <_ZN6Io_Spi7rx_buffEj+0xb0>
	{
		unsigned long cnt = 0;
		for (; cnt < BytesReceive; cnt++)
     808:	4b 01       	movw	r8, r22
     80a:	a1 2c       	mov	r10, r1
     80c:	b1 2c       	mov	r11, r1
     80e:	81 14       	cp	r8, r1
     810:	91 04       	cpc	r9, r1
     812:	a1 04       	cpc	r10, r1
     814:	b1 04       	cpc	r11, r1
     816:	09 f4       	brne	.+2      	; 0x81a <_ZN6Io_Spi7rx_buffEj+0x6a>
     818:	8a c0       	rjmp	.+276    	; 0x92e <_ZN6Io_Spi7rx_buffEj+0x17e>
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	76 01       	movw	r14, r12
		{
			unsigned char tmp = 0xFF;
     820:	77 24       	eor	r7, r7
     822:	7a 94       	dec	r7
     824:	79 82       	std	Y+1, r7	; 0x01
			if(txrx_byte(&tmp) == false)
     826:	be 01       	movw	r22, r28
     828:	6f 5f       	subi	r22, 0xFF	; 255
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN6Io_Spi9txrx_byteEPh>
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <_ZN6Io_Spi7rx_buffEj+0x88>
     836:	8a c0       	rjmp	.+276    	; 0x94c <_ZN6Io_Spi7rx_buffEj+0x19c>
			return false;
			spim_buff[cnt] = tmp;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	d8 01       	movw	r26, r16
     83c:	1b 96       	adiw	r26, 0x0b	; 11
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	1c 97       	sbiw	r26, 0x0c	; 12
     844:	ec 0d       	add	r30, r12
     846:	fd 1d       	adc	r31, r13
     848:	80 83       	st	Z, r24
	if(control_cs_pin)
		cs_port->OUTCLR = this->cs_pin_mask;
	if(!dmarx)
	{
		unsigned long cnt = 0;
		for (; cnt < BytesReceive; cnt++)
     84a:	bf ef       	ldi	r27, 0xFF	; 255
     84c:	cb 1a       	sub	r12, r27
     84e:	db 0a       	sbc	r13, r27
     850:	eb 0a       	sbc	r14, r27
     852:	fb 0a       	sbc	r15, r27
     854:	c8 14       	cp	r12, r8
     856:	d9 04       	cpc	r13, r9
     858:	ea 04       	cpc	r14, r10
     85a:	fb 04       	cpc	r15, r11
     85c:	18 f3       	brcs	.-58     	; 0x824 <_ZN6Io_Spi7rx_buffEj+0x74>
     85e:	67 c0       	rjmp	.+206    	; 0x92e <_ZN6Io_Spi7rx_buffEj+0x17e>
			spim_buff[cnt] = tmp;
		}
	}
	else
	{
		dmarx->ADDR = (unsigned int)spim_buff;
     860:	d8 01       	movw	r26, r16
     862:	1b 96       	adiw	r26, 0x0b	; 11
     864:	8d 91       	ld	r24, X+
     866:	9c 91       	ld	r25, X
     868:	1c 97       	sbiw	r26, 0x0c	; 12
     86a:	80 87       	std	Z+8, r24	; 0x08
     86c:	91 87       	std	Z+9, r25	; 0x09
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
     86e:	17 96       	adiw	r26, 0x07	; 7
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	18 97       	sbiw	r26, 0x08	; 8
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	82 83       	std	Z+2, r24	; 0x02
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_SPIC_RXC_gc;
     87a:	17 96       	adiw	r26, 0x07	; 7
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	18 97       	sbiw	r26, 0x08	; 8
     882:	8a e4       	ldi	r24, 0x4A	; 74
     884:	84 83       	std	Z+4, r24	; 0x04
		unsigned int cnt = BytesReceive;
		for(; cnt >= 256; cnt -= 256)
     886:	6f 3f       	cpi	r22, 0xFF	; 255
     888:	71 05       	cpc	r23, r1
     88a:	59 f1       	breq	.+86     	; 0x8e2 <_ZN6Io_Spi7rx_buffEj+0x132>
     88c:	50 f1       	brcs	.+84     	; 0x8e2 <_ZN6Io_Spi7rx_buffEj+0x132>
	else
	{
		dmarx->ADDR = (unsigned int)spim_buff;
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_SPIC_RXC_gc;
		unsigned int cnt = BytesReceive;
     88e:	cb 01       	movw	r24, r22
		for(; cnt >= 256; cnt -= 256)
		{
			dmarx->TRFCNT = 0;
			dmarx->CTRLA = EDMA_CH_SINGLE_bm;
     890:	44 e0       	ldi	r20, 0x04	; 4
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
			base_addr->DATA = 0xFF;
     892:	3f ef       	ldi	r19, 0xFF	; 255
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_SPIC_RXC_gc;
		unsigned int cnt = BytesReceive;
		for(; cnt >= 256; cnt -= 256)
		{
			dmarx->TRFCNT = 0;
     894:	d8 01       	movw	r26, r16
     896:	17 96       	adiw	r26, 0x07	; 7
     898:	ed 91       	ld	r30, X+
     89a:	fc 91       	ld	r31, X
     89c:	18 97       	sbiw	r26, 0x08	; 8
     89e:	16 82       	std	Z+6, r1	; 0x06
     8a0:	17 82       	std	Z+7, r1	; 0x07
			dmarx->CTRLA = EDMA_CH_SINGLE_bm;
     8a2:	17 96       	adiw	r26, 0x07	; 7
     8a4:	ed 91       	ld	r30, X+
     8a6:	fc 91       	ld	r31, X
     8a8:	18 97       	sbiw	r26, 0x08	; 8
     8aa:	40 83       	st	Z, r20
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
     8ac:	17 96       	adiw	r26, 0x07	; 7
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	18 97       	sbiw	r26, 0x08	; 8
     8b4:	20 81       	ld	r18, Z
     8b6:	20 68       	ori	r18, 0x80	; 128
     8b8:	20 83       	st	Z, r18
			base_addr->DATA = 0xFF;
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	11 97       	sbiw	r26, 0x01	; 1
     8c0:	33 83       	std	Z+3, r19	; 0x03
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
     8c2:	17 96       	adiw	r26, 0x07	; 7
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	18 97       	sbiw	r26, 0x08	; 8
     8ca:	21 81       	ldd	r18, Z+1	; 0x01
     8cc:	24 ff       	sbrs	r18, 4
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <_ZN6Io_Spi7rx_buffEj+0x11a>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
     8d0:	21 81       	ldd	r18, Z+1	; 0x01
     8d2:	20 61       	ori	r18, 0x10	; 16
     8d4:	21 83       	std	Z+1, r18	; 0x01
	{
		dmarx->ADDR = (unsigned int)spim_buff;
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_SPIC_RXC_gc;
		unsigned int cnt = BytesReceive;
		for(; cnt >= 256; cnt -= 256)
     8d6:	9a 95       	dec	r25
     8d8:	8f 3f       	cpi	r24, 0xFF	; 255
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <_ZN6Io_Spi7rx_buffEj+0x130>
     8de:	d0 f6       	brcc	.-76     	; 0x894 <_ZN6Io_Spi7rx_buffEj+0xe4>
     8e0:	77 27       	eor	r23, r23
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
			base_addr->DATA = 0xFF;
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
		}
		if(cnt)
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	19 f1       	breq	.+70     	; 0x92e <_ZN6Io_Spi7rx_buffEj+0x17e>
		{
			dmarx->TRFCNT = cnt;
     8e8:	d8 01       	movw	r26, r16
     8ea:	17 96       	adiw	r26, 0x07	; 7
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	18 97       	sbiw	r26, 0x08	; 8
     8f2:	66 83       	std	Z+6, r22	; 0x06
     8f4:	77 83       	std	Z+7, r23	; 0x07
			dmarx->CTRLA = EDMA_CH_SINGLE_bm;
     8f6:	17 96       	adiw	r26, 0x07	; 7
     8f8:	ed 91       	ld	r30, X+
     8fa:	fc 91       	ld	r31, X
     8fc:	18 97       	sbiw	r26, 0x08	; 8
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	80 83       	st	Z, r24
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
     902:	17 96       	adiw	r26, 0x07	; 7
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	18 97       	sbiw	r26, 0x08	; 8
     90a:	80 81       	ld	r24, Z
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	80 83       	st	Z, r24
			base_addr->DATA = 0xFF;
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	83 83       	std	Z+3, r24	; 0x03
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
     91a:	17 96       	adiw	r26, 0x07	; 7
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	18 97       	sbiw	r26, 0x08	; 8
     922:	81 81       	ldd	r24, Z+1	; 0x01
     924:	84 ff       	sbrs	r24, 4
     926:	fd cf       	rjmp	.-6      	; 0x922 <_ZN6Io_Spi7rx_buffEj+0x172>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
     928:	81 81       	ldd	r24, Z+1	; 0x01
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	if(control_cs_pin)
     92e:	f8 01       	movw	r30, r16
     930:	85 85       	ldd	r24, Z+13	; 0x0d
     932:	88 23       	and	r24, r24
     934:	51 f0       	breq	.+20     	; 0x94a <_ZN6Io_Spi7rx_buffEj+0x19a>
		cs_port->OUTSET = this->cs_pin_mask;
     936:	05 80       	ldd	r0, Z+5	; 0x05
     938:	f6 81       	ldd	r31, Z+6	; 0x06
     93a:	e0 2d       	mov	r30, r0
     93c:	d8 01       	movw	r26, r16
     93e:	14 96       	adiw	r26, 0x04	; 4
     940:	9c 91       	ld	r25, X
     942:	95 83       	std	Z+5, r25	; 0x05
     944:	03 c0       	rjmp	.+6      	; 0x94c <_ZN6Io_Spi7rx_buffEj+0x19c>
}

bool Io_Spi::rx_buff(unsigned int BytesReceive)
{
	if(!spim_buff)
		return false;
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	01 c0       	rjmp	.+2      	; 0x94c <_ZN6Io_Spi7rx_buffEj+0x19c>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
		}
	}
	if(control_cs_pin)
		cs_port->OUTSET = this->cs_pin_mask;
	return true;
     94a:	81 e0       	ldi	r24, 0x01	; 1
}
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	8f 90       	pop	r8
     966:	7f 90       	pop	r7
     968:	08 95       	ret

0000096a <_ZN6Io_Spi8set_baudEj>:
	return true;
}

void Io_Spi::set_baud(unsigned int baud)
{
	unsigned char tmp = base_addr->CTRL;
     96a:	dc 01       	movw	r26, r24
     96c:	ed 91       	ld	r30, X+
     96e:	fc 91       	ld	r31, X
     970:	80 81       	ld	r24, Z
	tmp = (tmp & (~(SPI_PRESCALER_gm | SPI_CLK2X_bm))) | ((SPI_PRESCALER_gm & baud) | SPI_CLK2X_bm);
     972:	8c 77       	andi	r24, 0x7C	; 124
     974:	80 68       	ori	r24, 0x80	; 128
     976:	63 70       	andi	r22, 0x03	; 3
     978:	68 2b       	or	r22, r24
	base_addr->CTRL = tmp;
     97a:	60 83       	st	Z, r22
     97c:	08 95       	ret

0000097e <_ZN6Io_Spi9cs_assertEv>:
}

void Io_Spi::cs_assert()
{
	cs_port->OUTCLR = cs_pin_mask;
     97e:	dc 01       	movw	r26, r24
     980:	15 96       	adiw	r26, 0x05	; 5
     982:	ed 91       	ld	r30, X+
     984:	fc 91       	ld	r31, X
     986:	16 97       	sbiw	r26, 0x06	; 6
     988:	14 96       	adiw	r26, 0x04	; 4
     98a:	8c 91       	ld	r24, X
     98c:	86 83       	std	Z+6, r24	; 0x06
     98e:	08 95       	ret

00000990 <_ZN6Io_Spi10cs_deasertEv>:
}

void Io_Spi::cs_deasert()
{
	cs_port->OUTSET = cs_pin_mask;
     990:	dc 01       	movw	r26, r24
     992:	15 96       	adiw	r26, 0x05	; 5
     994:	ed 91       	ld	r30, X+
     996:	fc 91       	ld	r31, X
     998:	16 97       	sbiw	r26, 0x06	; 6
     99a:	14 96       	adiw	r26, 0x04	; 4
     99c:	8c 91       	ld	r24, X
     99e:	85 83       	std	Z+5, r24	; 0x05
     9a0:	08 95       	ret

000009a2 <_ZN6Io_Twi6ReinitEv>:
Io_Twi* io_twi3_service;
#endif


void Io_Twi::Reinit()
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	8c 01       	movw	r16, r24
	volatile TWI_t* port = this->base_addr;
     9ac:	fc 01       	movw	r30, r24
     9ae:	c0 81       	ld	r28, Z
     9b0:	d1 81       	ldd	r29, Z+1	; 0x01
	port->MASTER.CTRLA &= (~TWI_MASTER_ENABLE_bm);
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	87 7f       	andi	r24, 0xF7	; 247
     9b6:	89 83       	std	Y+1, r24	; 0x01
#if defined(USE_TWI0) && defined (TWIC_TWIM_vect)
	if((int)port == (int)&TWIC)
     9b8:	c0 38       	cpi	r28, 0x80	; 128
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	df 07       	cpc	r29, r31
     9be:	81 f4       	brne	.+32     	; 0x9e0 <_ZN6Io_Twi6ReinitEv+0x3e>
	{
		PORTC.DIRSET = 1<<0 | 1<<1;
     9c0:	e0 e4       	ldi	r30, 0x40	; 64
     9c2:	f6 e0       	ldi	r31, 0x06	; 6
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	81 83       	std	Z+1, r24	; 0x01
		PORTC.OUTCLR = 1<<0 | 1<<1;
     9c8:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ca:	8f e1       	ldi	r24, 0x1F	; 31
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <_ZN6Io_Twi6ReinitEv+0x2c>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <_ZN6Io_Twi6ReinitEv+0x32>
     9d4:	00 00       	nop
		_delay_us(100);
		PORTC.DIRCLR = 1<<0 | 1<<1;
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	82 83       	std	Z+2, r24	; 0x02
		PORTC.PIN0CTRL = PORT_OPC_PULLUP_gc;
     9da:	88 e1       	ldi	r24, 0x18	; 24
     9dc:	80 8b       	std	Z+16, r24	; 0x10
		PORTC.PIN1CTRL = PORT_OPC_PULLUP_gc;
     9de:	81 8b       	std	Z+17, r24	; 0x11
		PORTF.DIRCLR = 1<<0 | 1<<1;
		PORTF.PIN0CTRL = PORT_OPC_PULLUP_gc;
		PORTF.PIN1CTRL = PORT_OPC_PULLUP_gc;
	}
#endif
	port->MASTER.BAUD = (FCPU/(100000<<1))-5;
     9e0:	60 91 06 20 	lds	r22, 0x2006
     9e4:	70 91 07 20 	lds	r23, 0x2007
     9e8:	80 91 08 20 	lds	r24, 0x2008
     9ec:	90 91 09 20 	lds	r25, 0x2009
     9f0:	20 e4       	ldi	r18, 0x40	; 64
     9f2:	3d e0       	ldi	r19, 0x0D	; 13
     9f4:	43 e0       	ldi	r20, 0x03	; 3
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__udivmodsi4>
     9fc:	25 50       	subi	r18, 0x05	; 5
     9fe:	2d 83       	std	Y+5, r18	; 0x05
	unsigned char Temp = port->MASTER.CTRLA;
     a00:	89 81       	ldd	r24, Y+1	; 0x01
	Temp = (Temp&(~TWI_MASTER_INTLVL_gm))|(TWI_MASTER_INTLVL_LO_gc);
     a02:	8f 73       	andi	r24, 0x3F	; 63
	Temp = (Temp&(~TWI_MASTER_RIEN_bm))|(1<<TWI_MASTER_RIEN_bp);
	Temp = (Temp&(~TWI_MASTER_WIEN_bm))|(1<<TWI_MASTER_WIEN_bp);
	Temp = (Temp&(~TWI_MASTER_ENABLE_bm))|(1<<TWI_MASTER_ENABLE_bp);
     a04:	88 67       	ori	r24, 0x78	; 120
	port->MASTER.CTRLA = Temp;
     a06:	89 83       	std	Y+1, r24	; 0x01
	port->MASTER.CTRLB |= TWI_MASTER_TIMEOUT_gm;
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	8c 60       	ori	r24, 0x0C	; 12
     a0c:	8a 83       	std	Y+2, r24	; 0x02
	port->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	8c 83       	std	Y+4, r24	; 0x04
	this->RxBuffSize = 16;
     a12:	80 e1       	ldi	r24, 0x10	; 16
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	f8 01       	movw	r30, r16
     a18:	87 87       	std	Z+15, r24	; 0x0f
     a1a:	90 8b       	std	Z+16, r25	; 0x10
	this->TxBuffSize = 16;
     a1c:	81 8b       	std	Z+17, r24	; 0x11
     a1e:	92 8b       	std	Z+18, r25	; 0x12
	this->RxBuff = (unsigned char *)malloc(16);
     a20:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <malloc>
     a24:	f8 01       	movw	r30, r16
     a26:	83 8b       	std	Z+19, r24	; 0x13
     a28:	94 8b       	std	Z+20, r25	; 0x14
	this->TxBuff = (unsigned char *)malloc(16);
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <malloc>
     a32:	f8 01       	movw	r30, r16
     a34:	85 8b       	std	Z+21, r24	; 0x15
     a36:	96 8b       	std	Z+22, r25	; 0x16
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <_ZN6Io_TwiC1EPV10TWI_struct>:

Io_Twi::Io_Twi(volatile TWI_t* port)
{
	this->base_addr = port;
     a42:	fc 01       	movw	r30, r24
     a44:	60 83       	st	Z, r22
     a46:	71 83       	std	Z+1, r23	; 0x01
	io_twi0_service = this;
     a48:	80 93 10 20 	sts	0x2010, r24
     a4c:	90 93 11 20 	sts	0x2011, r25
	this->twi = this;
     a50:	82 83       	std	Z+2, r24	; 0x02
     a52:	93 83       	std	Z+3, r25	; 0x03
	Reinit();
     a54:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6Io_Twi6ReinitEv>
     a58:	08 95       	ret

00000a5a <_ZN6Io_TwiD1Ev>:
}

Io_Twi::~Io_Twi()
     a5a:	08 95       	ret

00000a5c <_ZN6Io_Twi18MasterWriteHandlerEPS_>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

void Io_Twi::MasterWriteHandler(Io_Twi *twi)
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	fb 01       	movw	r30, r22
	TWI_t *ModuleAddr = (TWI_t *)twi->base_addr;
     a62:	a0 81       	ld	r26, Z
     a64:	b1 81       	ldd	r27, Z+1	; 0x01
	/* Local variables used in if tests to avoid compiler warning. */
	unsigned char bytesToWrite  = twi->bytesToWrite;
	unsigned char bytesToRead   = twi->bytesToRead;
     a66:	45 85       	ldd	r20, Z+13	; 0x0d
     a68:	56 85       	ldd	r21, Z+14	; 0x0e
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}*/

	/* If more bytes to write, send data. */
	/*else */if (twi->tCount < bytesToWrite) {
     a6a:	85 81       	ldd	r24, Z+5	; 0x05
     a6c:	96 81       	ldd	r25, Z+6	; 0x06
     a6e:	23 85       	ldd	r18, Z+11	; 0x0b
     a70:	34 85       	ldd	r19, Z+12	; 0x0c
     a72:	33 27       	eor	r19, r19
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	70 f4       	brcc	.+28     	; 0xa96 <_ZN6Io_Twi18MasterWriteHandlerEPS_+0x3a>
		unsigned char data = twi->TxBuff[twi->tCount];
     a7a:	25 89       	ldd	r18, Z+21	; 0x15
     a7c:	36 89       	ldd	r19, Z+22	; 0x16
     a7e:	e9 01       	movw	r28, r18
     a80:	c8 0f       	add	r28, r24
     a82:	d9 1f       	adc	r29, r25
     a84:	88 81       	ld	r24, Y
		ModuleAddr->MASTER.DATA = data;
     a86:	17 96       	adiw	r26, 0x07	; 7
     a88:	8c 93       	st	X, r24
		++twi->tCount;
     a8a:	85 81       	ldd	r24, Z+5	; 0x05
     a8c:	96 81       	ldd	r25, Z+6	; 0x06
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	85 83       	std	Z+5, r24	; 0x05
     a92:	96 83       	std	Z+6, r25	; 0x06
     a94:	12 c0       	rjmp	.+36     	; 0xaba <_ZN6Io_Twi18MasterWriteHandlerEPS_+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->rCount < bytesToRead) {
     a96:	55 27       	eor	r21, r21
     a98:	87 81       	ldd	r24, Z+7	; 0x07
     a9a:	90 85       	ldd	r25, Z+8	; 0x08
     a9c:	84 17       	cp	r24, r20
     a9e:	95 07       	cpc	r25, r21
     aa0:	30 f4       	brcc	.+12     	; 0xaae <_ZN6Io_Twi18MasterWriteHandlerEPS_+0x52>
		unsigned char readAddress = (twi->MasterSlaveAddr<<1) | 0x01;
     aa2:	84 81       	ldd	r24, Z+4	; 0x04
     aa4:	88 0f       	add	r24, r24
     aa6:	81 60       	ori	r24, 0x01	; 1
		ModuleAddr->MASTER.ADDR = readAddress;
     aa8:	16 96       	adiw	r26, 0x06	; 6
     aaa:	8c 93       	st	X, r24
     aac:	06 c0       	rjmp	.+12     	; 0xaba <_ZN6Io_Twi18MasterWriteHandlerEPS_+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	8c 93       	st	X, r24
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void Io_Twi::MasterTransactionFinished(Io_Twi *twi, unsigned char result)
{
	twi->result = result;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	82 87       	std	Z+10, r24	; 0x0a
	twi->status = TWIM_STATUS_READY;
     ab8:	11 86       	std	Z+9, r1	; 0x09
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <_ZN6Io_Twi17MasterReadHandlerEPS_>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void Io_Twi::MasterReadHandler(Io_Twi *twi)
{
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	fb 01       	movw	r30, r22
	TWI_t *ModuleAddr = (TWI_t *)twi->base_addr;
     ac6:	a0 81       	ld	r26, Z
     ac8:	b1 81       	ldd	r27, Z+1	; 0x01
	/* Fetch data if bytes to be read. */
	if (twi->rCount < twi->RxBuffSize) {
     aca:	87 81       	ldd	r24, Z+7	; 0x07
     acc:	90 85       	ldd	r25, Z+8	; 0x08
     ace:	27 85       	ldd	r18, Z+15	; 0x0f
     ad0:	30 89       	ldd	r19, Z+16	; 0x10
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	78 f4       	brcc	.+30     	; 0xaf6 <_ZN6Io_Twi17MasterReadHandlerEPS_+0x36>
		unsigned char data = ModuleAddr->MASTER.DATA;
     ad8:	17 96       	adiw	r26, 0x07	; 7
     ada:	4c 91       	ld	r20, X
     adc:	17 97       	sbiw	r26, 0x07	; 7
		twi->RxBuff[twi->rCount] = data;
     ade:	23 89       	ldd	r18, Z+19	; 0x13
     ae0:	34 89       	ldd	r19, Z+20	; 0x14
     ae2:	e9 01       	movw	r28, r18
     ae4:	c8 0f       	add	r28, r24
     ae6:	d9 1f       	adc	r29, r25
     ae8:	48 83       	st	Y, r20
		twi->rCount++;
     aea:	87 81       	ldd	r24, Z+7	; 0x07
     aec:	90 85       	ldd	r25, Z+8	; 0x08
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	87 83       	std	Z+7, r24	; 0x07
     af2:	90 87       	std	Z+8, r25	; 0x08
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <_ZN6Io_Twi17MasterReadHandlerEPS_+0x44>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	13 96       	adiw	r26, 0x03	; 3
     afa:	8c 93       	st	X, r24
     afc:	13 97       	sbiw	r26, 0x03	; 3
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void Io_Twi::MasterTransactionFinished(Io_Twi *twi, unsigned char result)
{
	twi->result = result;
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	82 87       	std	Z+10, r24	; 0x0a
	twi->status = TWIM_STATUS_READY;
     b02:	11 86       	std	Z+9, r1	; 0x09

	/* Local variable used in if test to avoid compiler warning. */
	unsigned char bytesToRead = twi->bytesToRead;

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->rCount < bytesToRead) {
     b04:	85 85       	ldd	r24, Z+13	; 0x0d
     b06:	96 85       	ldd	r25, Z+14	; 0x0e
     b08:	99 27       	eor	r25, r25
     b0a:	27 81       	ldd	r18, Z+7	; 0x07
     b0c:	30 85       	ldd	r19, Z+8	; 0x08
     b0e:	28 17       	cp	r18, r24
     b10:	39 07       	cpc	r19, r25
     b12:	20 f4       	brcc	.+8      	; 0xb1c <_ZN6Io_Twi17MasterReadHandlerEPS_+0x5c>
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	8c 93       	st	X, r24
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <_ZN6Io_Twi17MasterReadHandlerEPS_+0x68>
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
     b1c:	87 e0       	ldi	r24, 0x07	; 7
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	8c 93       	st	X, r24
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void Io_Twi::MasterTransactionFinished(Io_Twi *twi, unsigned char result)
{
	twi->result = result;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	82 87       	std	Z+10, r24	; 0x0a
	twi->status = TWIM_STATUS_READY;
     b26:	11 86       	std	Z+9, r1	; 0x09
	else {
		ModuleAddr->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
		MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <_ZN6Io_Twi36MasterArbitrationLostBusErrorHandlerEPS_>:

void Io_Twi::MasterArbitrationLostBusErrorHandler(Io_Twi *twi)
{
     b2e:	fb 01       	movw	r30, r22
	TWI_t *ModuleAddr = (TWI_t *)twi->base_addr;
     b30:	a0 81       	ld	r26, Z
     b32:	b1 81       	ldd	r27, Z+1	; 0x01
	unsigned char currentStatus = ModuleAddr->MASTER.STATUS;
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	8c 91       	ld	r24, X
     b38:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     b3a:	82 ff       	sbrs	r24, 2
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <_ZN6Io_Twi36MasterArbitrationLostBusErrorHandlerEPS_+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
     b3e:	94 e0       	ldi	r25, 0x04	; 4
     b40:	92 87       	std	Z+10, r25	; 0x0a
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <_ZN6Io_Twi36MasterArbitrationLostBusErrorHandlerEPS_+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	92 87       	std	Z+10, r25	; 0x0a
	}

	/* Clear interrupt flag. */
	ModuleAddr->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	14 96       	adiw	r26, 0x04	; 4
     b4c:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
     b4e:	11 86       	std	Z+9, r1	; 0x09
     b50:	08 95       	ret

00000b52 <_ZN6Io_Twi22MasterInterruptHandlerEPS_>:
}

void Io_Twi::MasterInterruptHandler(Io_Twi *twi)
{
	TWI_t *ModuleAddr = (TWI_t *)twi->base_addr;
     b52:	db 01       	movw	r26, r22
     b54:	ed 91       	ld	r30, X+
     b56:	fc 91       	ld	r31, X
	unsigned char currentStatus = ModuleAddr->MASTER.STATUS;
     b58:	24 81       	ldd	r18, Z+4	; 0x04
     b5a:	32 2f       	mov	r19, r18
     b5c:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     b5e:	19 f0       	breq	.+6      	; 0xb66 <_ZN6Io_Twi22MasterInterruptHandlerEPS_+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		MasterArbitrationLostBusErrorHandler(twi);
     b60:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN6Io_Twi36MasterArbitrationLostBusErrorHandlerEPS_>
     b64:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     b66:	26 ff       	sbrs	r18, 6
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <_ZN6Io_Twi22MasterInterruptHandlerEPS_+0x1e>
		MasterWriteHandler(twi);
     b6a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN6Io_Twi18MasterWriteHandlerEPS_>
     b6e:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     b70:	22 23       	and	r18, r18
     b72:	1c f4       	brge	.+6      	; 0xb7a <_ZN6Io_Twi22MasterInterruptHandlerEPS_+0x28>
		MasterReadHandler(twi);
     b74:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN6Io_Twi17MasterReadHandlerEPS_>
     b78:	08 95       	ret
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void Io_Twi::MasterTransactionFinished(Io_Twi *twi, unsigned char result)
{
	twi->result = result;
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	fb 01       	movw	r30, r22
     b7e:	82 87       	std	Z+10, r24	; 0x0a
	twi->status = TWIM_STATUS_READY;
     b80:	11 86       	std	Z+9, r1	; 0x09
     b82:	08 95       	ret

00000b84 <__vector_11>:
//#####################################################
//#####################################################
//#####################################################
#if defined(USE_TWI0) && defined (TWIC_TWIM_vect)
		ISR(TWIC_TWIM_vect)
		{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
			io_twi0_service->MasterInterruptHandler(io_twi0_service);
     ba6:	80 91 10 20 	lds	r24, 0x2010
     baa:	90 91 11 20 	lds	r25, 0x2011
     bae:	bc 01       	movw	r22, r24
     bb0:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN6Io_Twi22MasterInterruptHandlerEPS_>
		}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <_ZN6Io_Twi5resetEPS_>:
}
//#####################################################
bool Io_Twi::reset(Io_Twi* twi)
{
	//TWI_t* Return = Twi_GetSetBaseAddress(TwiStruct);
	twi->base_addr->MASTER.CTRLA &= ~TWI_MASTER_ENABLE_bm;
     bd6:	db 01       	movw	r26, r22
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
     bde:	87 7f       	andi	r24, 0xF7	; 247
     be0:	81 83       	std	Z+1, r24	; 0x01
     be2:	ba e6       	ldi	r27, 0x6A	; 106
     be4:	ba 95       	dec	r27
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <_ZN6Io_Twi5resetEPS_+0xe>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <_ZN6Io_Twi5resetEPS_+0x14>
	_delay_us(10);
	twi->base_addr->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     bea:	db 01       	movw	r26, r22
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	88 60       	ori	r24, 0x08	; 8
     bf4:	81 83       	std	Z+1, r24	; 0x01
	return true;
}
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	08 95       	ret

00000bfa <_ZN6Io_Twi15MasterWriteReadEPS_jj>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool Io_Twi::MasterWriteRead(Io_Twi *twi, unsigned int bytesToWrite, unsigned int bytesToRead)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	eb 01       	movw	r28, r22
	/*Parameter sanity check. */
	if (bytesToWrite > twi->TxBuffSize) 
     c04:	69 89       	ldd	r22, Y+17	; 0x11
     c06:	7a 89       	ldd	r23, Y+18	; 0x12
     c08:	64 17       	cp	r22, r20
     c0a:	75 07       	cpc	r23, r21
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x16>
     c0e:	4a c0       	rjmp	.+148    	; 0xca4 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xaa>
	{
		return false;
	}
	if (bytesToRead > twi->RxBuffSize) 
     c10:	6f 85       	ldd	r22, Y+15	; 0x0f
     c12:	78 89       	ldd	r23, Y+16	; 0x10
     c14:	62 17       	cp	r22, r18
     c16:	73 07       	cpc	r23, r19
     c18:	08 f4       	brcc	.+2      	; 0xc1c <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x22>
     c1a:	46 c0       	rjmp	.+140    	; 0xca8 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xae>
	{
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) 
     c1c:	69 85       	ldd	r22, Y+9	; 0x09
     c1e:	61 11       	cpse	r22, r1
     c20:	45 c0       	rjmp	.+138    	; 0xcac <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xb2>
	{

		twi->status = TWIM_STATUS_BUSY;
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	69 87       	std	Y+9, r22	; 0x09
		twi->result = TWIM_RESULT_UNKNOWN;
     c26:	1a 86       	std	Y+10, r1	; 0x0a
		//for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) 
		//{
		//	twi->WriteBuff[bufferIndex] = DataToWrite[bufferIndex];
		//}

		twi->bytesToWrite = bytesToWrite;
     c28:	4b 87       	std	Y+11, r20	; 0x0b
     c2a:	5c 87       	std	Y+12, r21	; 0x0c
		twi->bytesToRead = bytesToRead;
     c2c:	2d 87       	std	Y+13, r18	; 0x0d
     c2e:	3e 87       	std	Y+14, r19	; 0x0e
		twi->tCount = 0;
     c30:	1d 82       	std	Y+5, r1	; 0x05
     c32:	1e 82       	std	Y+6, r1	; 0x06
		twi->rCount = 0;
     c34:	1f 82       	std	Y+7, r1	; 0x07
     c36:	18 86       	std	Y+8, r1	; 0x08

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
     c38:	45 2b       	or	r20, r21
     c3a:	49 f0       	breq	.+18     	; 0xc4e <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x54>
			uint8_t writeAddress = (twi->MasterSlaveAddr<<1) & ~0x01;
     c3c:	2c 81       	ldd	r18, Y+4	; 0x04
     c3e:	22 0f       	add	r18, r18
			this->base_addr->MASTER.ADDR = writeAddress;
     c40:	dc 01       	movw	r26, r24
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	26 83       	std	Z+6, r18	; 0x06
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool Io_Twi::MasterWriteRead(Io_Twi *twi, unsigned int bytesToWrite, unsigned int bytesToRead)
{
     c48:	08 ee       	ldi	r16, 0xE8	; 232
     c4a:	13 e0       	ldi	r17, 0x03	; 3
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x76>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
     c4e:	23 2b       	or	r18, r19
     c50:	d9 f3       	breq	.-10     	; 0xc48 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x4e>
			uint8_t readAddress = (twi->MasterSlaveAddr<<1) | 0x01;
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	22 0f       	add	r18, r18
     c56:	21 60       	ori	r18, 0x01	; 1
			this->base_addr->MASTER.ADDR = readAddress;
     c58:	dc 01       	movw	r26, r24
     c5a:	ed 91       	ld	r30, X+
     c5c:	fc 91       	ld	r31, X
     c5e:	26 83       	std	Z+6, r18	; 0x06
     c60:	f3 cf       	rjmp	.-26     	; 0xc48 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x4e>
     c62:	ef e1       	ldi	r30, 0x1F	; 31
     c64:	f3 e0       	ldi	r31, 0x03	; 3
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x6c>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x72>
     c6c:	00 00       	nop

		unsigned int timeout = 1000;
		while(twi->status != TWIM_STATUS_READY && --timeout)
		{
			_delay_us(100);
			asm("WDR");
     c6e:	a8 95       	wdr
			uint8_t readAddress = (twi->MasterSlaveAddr<<1) | 0x01;
			this->base_addr->MASTER.ADDR = readAddress;
		}

		unsigned int timeout = 1000;
		while(twi->status != TWIM_STATUS_READY && --timeout)
     c70:	29 85       	ldd	r18, Y+9	; 0x09
     c72:	22 23       	and	r18, r18
     c74:	31 f0       	breq	.+12     	; 0xc82 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x88>
     c76:	01 50       	subi	r16, 0x01	; 1
     c78:	11 09       	sbc	r17, r1
     c7a:	01 15       	cp	r16, r1
     c7c:	11 05       	cpc	r17, r1
     c7e:	89 f7       	brne	.-30     	; 0xc62 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x68>
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x8e>
		{
			_delay_us(100);
			asm("WDR");
		}
		if(timeout == 0) 
     c82:	01 15       	cp	r16, r1
     c84:	11 05       	cpc	r17, r1
     c86:	19 f4       	brne	.+6      	; 0xc8e <_ZN6Io_Twi15MasterWriteReadEPS_jj+0x94>
			reset(twi);
     c88:	be 01       	movw	r22, r28
     c8a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN6Io_Twi5resetEPS_>
	if(twi->result != TWIM_RESULT_OK || timeout == 0) 
     c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	21 f4       	brne	.+8      	; 0xc9c <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xa2>
     c94:	01 2b       	or	r16, r17
     c96:	19 f0       	breq	.+6      	; 0xc9e <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xa4>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xa4>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	89 27       	eor	r24, r25
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xb4>
bool Io_Twi::MasterWriteRead(Io_Twi *twi, unsigned int bytesToWrite, unsigned int bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > twi->TxBuffSize) 
	{
		return false;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xb4>
	}
	if (bytesToRead > twi->RxBuffSize) 
	{
		return false;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	01 c0       	rjmp	.+2      	; 0xcae <_ZN6Io_Twi15MasterWriteReadEPS_jj+0xb4>
		return false;
	return true;
	} 
	else 
	{
		return false;
     cac:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <_ZN8Io_UsartD1Ev>:
#endif
	);
	//htimer.service_add((void *)&service, this);
}

Io_Usart::~Io_Usart ()
     cb8:	fc 01       	movw	r30, r24
{
	base_addr->CTRLB = 0;
     cba:	a0 85       	ldd	r26, Z+8	; 0x08
     cbc:	b1 85       	ldd	r27, Z+9	; 0x09
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	1c 92       	st	X, r1
	//htimer.service_remove((void *)&service, this);
	usart = NULL;
     cc2:	12 86       	std	Z+10, r1	; 0x0a
     cc4:	13 86       	std	Z+11, r1	; 0x0b
	base_addr = NULL;
     cc6:	10 86       	std	Z+8, r1	; 0x08
     cc8:	11 86       	std	Z+9, r1	; 0x09
     cca:	08 95       	ret

00000ccc <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb>:
bool Io_Usart::reinit (volatile USART_t* port, unsigned long speed, bool Tx_Enable, bool Rx_Enable, unsigned char c_mode, unsigned char p_mode, unsigned char s_mode, PORT_t *cs_port, unsigned char cs_pin_mask
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
	, bool Uart0RelocatePins
#endif
) 
{
     ccc:	4f 92       	push	r4
     cce:	5f 92       	push	r5
     cd0:	6f 92       	push	r6
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	af 92       	push	r10
     cd8:	cf 92       	push	r12
     cda:	ef 92       	push	r14
     cdc:	0f 93       	push	r16
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	3c 01       	movw	r6, r24
     ce8:	2b 01       	movw	r4, r22
     cea:	ae 85       	ldd	r26, Y+14	; 0x0e
     cec:	bf 85       	ldd	r27, Y+15	; 0x0f
     cee:	68 89       	ldd	r22, Y+16	; 0x10
	if(!port)
     cf0:	41 14       	cp	r4, r1
     cf2:	51 04       	cpc	r5, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x2c>
     cf6:	f2 c0       	rjmp	.+484    	; 0xedc <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x210>
		return false;
#if defined(USARTC0) && defined(USE_UART0)
	if((int)port == (int)&USARTC0)
     cf8:	70 ec       	ldi	r23, 0xC0	; 192
     cfa:	47 16       	cp	r4, r23
     cfc:	78 e0       	ldi	r23, 0x08	; 8
     cfe:	57 06       	cpc	r5, r23
     d00:	89 f5       	brne	.+98     	; 0xd64 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x98>
	{
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
		if(Uart0RelocatePins == false)
     d02:	89 89       	ldd	r24, Y+17	; 0x11
     d04:	81 11       	cpse	r24, r1
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x66>
		{
			PORTC.REMAP &= ~PORT_USART0_bm;
     d08:	e0 e4       	ldi	r30, 0x40	; 64
     d0a:	f6 e0       	ldi	r31, 0x06	; 6
     d0c:	86 85       	ldd	r24, Z+14	; 0x0e
     d0e:	8f 7e       	andi	r24, 0xEF	; 239
     d10:	86 87       	std	Z+14, r24	; 0x0e
#endif
			if(c_mode == this->c_mode_mspi/* || c_mode == this->c_mode_sync*/)
     d12:	e0 ec       	ldi	r30, 0xC0	; 192
     d14:	ce 12       	cpse	r12, r30
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x56>
			{
				PORTC.DIRSET = 1<<1;
     d18:	e0 e4       	ldi	r30, 0x40	; 64
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	81 83       	std	Z+1, r24	; 0x01
				PORTC.OUTSET = 1<<1;
     d20:	85 83       	std	Z+5, r24	; 0x05
			}
			PORTC.DIRSET = 1<<3;
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	81 83       	std	Z+1, r24	; 0x01
			PORTC.OUTSET = 1<<3;
     d2a:	85 83       	std	Z+5, r24	; 0x05
			PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     d2c:	88 e1       	ldi	r24, 0x18	; 24
     d2e:	82 8b       	std	Z+18, r24	; 0x12
     d30:	14 c0       	rjmp	.+40     	; 0xd5a <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x8e>
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
		}
		else
		{
			PORTC.REMAP |= PORT_USART0_bm;
     d32:	e0 e4       	ldi	r30, 0x40	; 64
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	86 85       	ldd	r24, Z+14	; 0x0e
     d38:	80 61       	ori	r24, 0x10	; 16
     d3a:	86 87       	std	Z+14, r24	; 0x0e
			if(c_mode == this->c_mode_mspi/* || c_mode == this->c_mode_sync*/)
     d3c:	f0 ec       	ldi	r31, 0xC0	; 192
     d3e:	cf 12       	cpse	r12, r31
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x80>
			{
				PORTC.DIRSET = 1<<5;
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f6 e0       	ldi	r31, 0x06	; 6
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	81 83       	std	Z+1, r24	; 0x01
				PORTC.OUTSET = 1<<5;
     d4a:	85 83       	std	Z+5, r24	; 0x05
			}
			PORTC.DIRSET = 1<<7;
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f6 e0       	ldi	r31, 0x06	; 6
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	81 83       	std	Z+1, r24	; 0x01
			PORTC.OUTSET = 1<<7;
     d54:	85 83       	std	Z+5, r24	; 0x05
			PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
     d56:	88 e1       	ldi	r24, 0x18	; 24
     d58:	86 8b       	std	Z+22, r24	; 0x16
		}
#endif
		io_usart0_service = this;
     d5a:	60 92 14 20 	sts	0x2014, r6
     d5e:	70 92 15 20 	sts	0x2015, r7
     d62:	41 c0       	rjmp	.+130    	; 0xde6 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x11a>
		io_usart1_service = this;
	}
	else 
#endif
#if defined(USARTD0) && defined(USE_UART2)
	if((int)port == (int)&USARTD0)
     d64:	70 ec       	ldi	r23, 0xC0	; 192
     d66:	47 16       	cp	r4, r23
     d68:	79 e0       	ldi	r23, 0x09	; 9
     d6a:	57 06       	cpc	r5, r23
     d6c:	89 f5       	brne	.+98     	; 0xdd0 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x104>
	{
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
		if(Uart0RelocatePins == false)
     d6e:	89 89       	ldd	r24, Y+17	; 0x11
     d70:	81 11       	cpse	r24, r1
     d72:	15 c0       	rjmp	.+42     	; 0xd9e <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0xd2>
		{
			PORTD.REMAP &= ~PORT_USART0_bm;
     d74:	e0 e6       	ldi	r30, 0x60	; 96
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	86 85       	ldd	r24, Z+14	; 0x0e
     d7a:	8f 7e       	andi	r24, 0xEF	; 239
     d7c:	86 87       	std	Z+14, r24	; 0x0e
#endif
			if(c_mode == this->c_mode_mspi/* || c_mode == this->c_mode_sync*/)
     d7e:	e0 ec       	ldi	r30, 0xC0	; 192
     d80:	ce 12       	cpse	r12, r30
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0xc2>
			{
				PORTD.DIRSET = 1<<1;
     d84:	e0 e6       	ldi	r30, 0x60	; 96
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	81 83       	std	Z+1, r24	; 0x01
				PORTD.OUTSET = 1<<1;
     d8c:	85 83       	std	Z+5, r24	; 0x05
			}
			PORTD.DIRSET = 1<<3;
     d8e:	e0 e6       	ldi	r30, 0x60	; 96
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	88 e0       	ldi	r24, 0x08	; 8
     d94:	81 83       	std	Z+1, r24	; 0x01
			PORTD.OUTSET = 1<<3;
     d96:	85 83       	std	Z+5, r24	; 0x05
			PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
     d98:	88 e1       	ldi	r24, 0x18	; 24
     d9a:	82 8b       	std	Z+18, r24	; 0x12
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0xfa>
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
		}
		else
		{
			PORTD.REMAP |= PORT_USART0_bm;
     d9e:	e0 e6       	ldi	r30, 0x60	; 96
     da0:	f6 e0       	ldi	r31, 0x06	; 6
     da2:	86 85       	ldd	r24, Z+14	; 0x0e
     da4:	80 61       	ori	r24, 0x10	; 16
     da6:	86 87       	std	Z+14, r24	; 0x0e
			if(c_mode == this->c_mode_mspi/* || c_mode == this->c_mode_sync*/)
     da8:	f0 ec       	ldi	r31, 0xC0	; 192
     daa:	cf 12       	cpse	r12, r31
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0xec>
			{
				PORTD.DIRSET = 1<<5;
     dae:	e0 e6       	ldi	r30, 0x60	; 96
     db0:	f6 e0       	ldi	r31, 0x06	; 6
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	81 83       	std	Z+1, r24	; 0x01
				PORTD.OUTSET = 1<<5;
     db6:	85 83       	std	Z+5, r24	; 0x05
			}
			PORTD.DIRSET = 1<<7;
     db8:	e0 e6       	ldi	r30, 0x60	; 96
     dba:	f6 e0       	ldi	r31, 0x06	; 6
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	81 83       	std	Z+1, r24	; 0x01
			PORTD.OUTSET = 1<<7;
     dc0:	85 83       	std	Z+5, r24	; 0x05
			PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;
     dc2:	88 e1       	ldi	r24, 0x18	; 24
     dc4:	86 8b       	std	Z+22, r24	; 0x16
		}
#endif
		io_usart2_service = this;
     dc6:	60 92 12 20 	sts	0x2012, r6
     dca:	70 92 13 20 	sts	0x2013, r7
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x11a>
	}
	else 
#endif
	
	{
			usart = NULL;
     dd0:	d3 01       	movw	r26, r6
     dd2:	1a 96       	adiw	r26, 0x0a	; 10
     dd4:	1d 92       	st	X+, r1
     dd6:	1c 92       	st	X, r1
     dd8:	1b 97       	sbiw	r26, 0x0b	; 11
			base_addr = NULL;
     dda:	18 96       	adiw	r26, 0x08	; 8
     ddc:	1d 92       	st	X+, r1
     dde:	1c 92       	st	X, r1
     de0:	19 97       	sbiw	r26, 0x09	; 9
			return false;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	7c c0       	rjmp	.+248    	; 0xede <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x212>
	}
	if(cs_port && cs_pin_mask)
     de6:	10 97       	sbiw	r26, 0x00	; 0
     de8:	41 f0       	breq	.+16     	; 0xdfa <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x12e>
     dea:	66 23       	and	r22, r22
     dec:	31 f0       	breq	.+12     	; 0xdfa <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x12e>
	{
		cs_port->OUTSET = cs_pin_mask;
     dee:	15 96       	adiw	r26, 0x05	; 5
     df0:	6c 93       	st	X, r22
     df2:	15 97       	sbiw	r26, 0x05	; 5
		cs_port->DIRSET = cs_pin_mask;
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	6c 93       	st	X, r22
     df8:	11 97       	sbiw	r26, 0x01	; 1
	}
	usart = this;
     dfa:	f3 01       	movw	r30, r6
     dfc:	62 86       	std	Z+10, r6	; 0x0a
     dfe:	73 86       	std	Z+11, r7	; 0x0b
	base_addr = port;
     e00:	40 86       	std	Z+8, r4	; 0x08
     e02:	51 86       	std	Z+9, r5	; 0x09
	this->cs_port = cs_port;
     e04:	a4 87       	std	Z+12, r26	; 0x0c
     e06:	b5 87       	std	Z+13, r27	; 0x0d
	this->cs_pin_mask = cs_pin_mask;
     e08:	62 8b       	std	Z+18, r22	; 0x12
	//base_addr->CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
	if(c_mode == this->c_mode_mspi)
     e0a:	f0 ec       	ldi	r31, 0xC0	; 192
     e0c:	cf 12       	cpse	r12, r31
     e0e:	2c c0       	rjmp	.+88     	; 0xe68 <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x19c>
	{
		base_addr->BAUDCTRLA = (unsigned char)speed;
     e10:	d2 01       	movw	r26, r4
     e12:	16 96       	adiw	r26, 0x06	; 6
     e14:	2c 93       	st	X, r18
		base_addr->BAUDCTRLB = (unsigned char)((speed>>8) & 0x0F);
     e16:	d3 01       	movw	r26, r6
     e18:	18 96       	adiw	r26, 0x08	; 8
     e1a:	ed 91       	ld	r30, X+
     e1c:	fc 91       	ld	r31, X
     e1e:	19 97       	sbiw	r26, 0x09	; 9
     e20:	3f 70       	andi	r19, 0x0F	; 15
     e22:	37 83       	std	Z+7, r19	; 0x07
		base_addr->CTRLA = USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
     e24:	18 96       	adiw	r26, 0x08	; 8
     e26:	ed 91       	ld	r30, X+
     e28:	fc 91       	ld	r31, X
     e2a:	19 97       	sbiw	r26, 0x09	; 9
     e2c:	12 82       	std	Z+2, r1	; 0x02
		base_addr->CTRLC = USART_CMODE_MSPI_gc | (p_mode & USART_PMODE_gm) | (s_mode & USART_SBMODE_bm) | USART_CHSIZE_5BIT_gc;
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	98 2d       	mov	r25, r8
     e38:	98 70       	andi	r25, 0x08	; 8
     e3a:	90 6c       	ori	r25, 0xC0	; 192
     e3c:	8a 2d       	mov	r24, r10
     e3e:	80 73       	andi	r24, 0x30	; 48
     e40:	a9 2e       	mov	r10, r25
     e42:	a8 2a       	or	r10, r24
     e44:	a4 82       	std	Z+4, r10	; 0x04
		base_addr->CTRLB = (USART_RXEN_bm & (Rx_Enable << USART_RXEN_bp)) | (USART_TXEN_bm & (Tx_Enable << USART_TXEN_bp));
     e46:	18 96       	adiw	r26, 0x08	; 8
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	19 97       	sbiw	r26, 0x09	; 9
     e4e:	b0 e1       	ldi	r27, 0x10	; 16
     e50:	eb 9e       	mul	r14, r27
     e52:	c0 01       	movw	r24, r0
     e54:	11 24       	eor	r1, r1
     e56:	80 71       	andi	r24, 0x10	; 16
     e58:	00 0f       	add	r16, r16
     e5a:	00 0f       	add	r16, r16
     e5c:	00 0f       	add	r16, r16
     e5e:	08 70       	andi	r16, 0x08	; 8
     e60:	80 2b       	or	r24, r16
     e62:	83 83       	std	Z+3, r24	; 0x03
		base_addr->BAUDCTRLB = (unsigned char)((ubrr>>8) & 0x0F);
		base_addr->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
		base_addr->CTRLC = (USART_CMODE_gm & c_mode) | (p_mode & USART_PMODE_gm) | (s_mode & USART_SBMODE_bm) | USART_CHSIZE_8BIT_gc;
		base_addr->CTRLB = (USART_RXEN_bm & (Rx_Enable << USART_RXEN_bp)) | (USART_TXEN_bm & (Tx_Enable << USART_TXEN_bp)) | USART_CLK2X_bm;
	}
	return true;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	3b c0       	rjmp	.+118    	; 0xede <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x212>
		base_addr->CTRLC = USART_CMODE_MSPI_gc | (p_mode & USART_PMODE_gm) | (s_mode & USART_SBMODE_bm) | USART_CHSIZE_5BIT_gc;
		base_addr->CTRLB = (USART_RXEN_bm & (Rx_Enable << USART_RXEN_bp)) | (USART_TXEN_bm & (Tx_Enable << USART_TXEN_bp));
	}
	else
	{
		unsigned int ubrr = ((F_CPU / 8) / speed)-1;
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	79 e0       	ldi	r23, 0x09	; 9
     e6c:	8d e3       	ldi	r24, 0x3D	; 61
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__udivmodsi4>
     e74:	21 50       	subi	r18, 0x01	; 1
     e76:	31 09       	sbc	r19, r1
		base_addr->BAUDCTRLA = (unsigned char)ubrr;
     e78:	f2 01       	movw	r30, r4
     e7a:	26 83       	std	Z+6, r18	; 0x06
		base_addr->BAUDCTRLB = (unsigned char)((ubrr>>8) & 0x0F);
     e7c:	d3 01       	movw	r26, r6
     e7e:	18 96       	adiw	r26, 0x08	; 8
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	19 97       	sbiw	r26, 0x09	; 9
     e86:	83 2f       	mov	r24, r19
     e88:	8f 70       	andi	r24, 0x0F	; 15
     e8a:	87 83       	std	Z+7, r24	; 0x07
		base_addr->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
     e8c:	18 96       	adiw	r26, 0x08	; 8
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	19 97       	sbiw	r26, 0x09	; 9
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	82 83       	std	Z+2, r24	; 0x02
		base_addr->CTRLC = (USART_CMODE_gm & c_mode) | (p_mode & USART_PMODE_gm) | (s_mode & USART_SBMODE_bm) | USART_CHSIZE_8BIT_gc;
     e98:	18 96       	adiw	r26, 0x08	; 8
     e9a:	ed 91       	ld	r30, X+
     e9c:	fc 91       	ld	r31, X
     e9e:	19 97       	sbiw	r26, 0x09	; 9
     ea0:	98 2d       	mov	r25, r8
     ea2:	98 70       	andi	r25, 0x08	; 8
     ea4:	93 60       	ori	r25, 0x03	; 3
     ea6:	8a 2d       	mov	r24, r10
     ea8:	80 73       	andi	r24, 0x30	; 48
     eaa:	a9 2e       	mov	r10, r25
     eac:	a8 2a       	or	r10, r24
     eae:	8c 2d       	mov	r24, r12
     eb0:	80 7c       	andi	r24, 0xC0	; 192
     eb2:	ca 2c       	mov	r12, r10
     eb4:	c8 2a       	or	r12, r24
     eb6:	c4 82       	std	Z+4, r12	; 0x04
		base_addr->CTRLB = (USART_RXEN_bm & (Rx_Enable << USART_RXEN_bp)) | (USART_TXEN_bm & (Tx_Enable << USART_TXEN_bp)) | USART_CLK2X_bm;
     eb8:	18 96       	adiw	r26, 0x08	; 8
     eba:	ed 91       	ld	r30, X+
     ebc:	fc 91       	ld	r31, X
     ebe:	19 97       	sbiw	r26, 0x09	; 9
     ec0:	00 0f       	add	r16, r16
     ec2:	00 0f       	add	r16, r16
     ec4:	00 0f       	add	r16, r16
     ec6:	08 70       	andi	r16, 0x08	; 8
     ec8:	04 60       	ori	r16, 0x04	; 4
     eca:	b0 e1       	ldi	r27, 0x10	; 16
     ecc:	eb 9e       	mul	r14, r27
     ece:	c0 01       	movw	r24, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	80 71       	andi	r24, 0x10	; 16
     ed4:	80 2b       	or	r24, r16
     ed6:	83 83       	std	Z+3, r24	; 0x03
	}
	return true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb+0x212>
	, bool Uart0RelocatePins
#endif
) 
{
	if(!port)
		return false;
     edc:	80 e0       	ldi	r24, 0x00	; 0
		base_addr->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
		base_addr->CTRLC = (USART_CMODE_gm & c_mode) | (p_mode & USART_PMODE_gm) | (s_mode & USART_SBMODE_bm) | USART_CHSIZE_8BIT_gc;
		base_addr->CTRLB = (USART_RXEN_bm & (Rx_Enable << USART_RXEN_bp)) | (USART_TXEN_bm & (Tx_Enable << USART_TXEN_bp)) | USART_CLK2X_bm;
	}
	return true;
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	0f 91       	pop	r16
     ee4:	ef 90       	pop	r14
     ee6:	cf 90       	pop	r12
     ee8:	af 90       	pop	r10
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	08 95       	ret

00000ef6 <_ZN8Io_UsartC1EPV12USART_structmbbhhhP11PORT_structhb>:
#endif
#if defined(USARTF1) && defined(USE_UART7)
Io_Usart *io_usart7_service;
#endif

Io_Usart::Io_Usart (volatile USART_t* port, unsigned long speed, bool Tx_Enable, bool Rx_Enable, unsigned char c_mode, unsigned char p_mode, unsigned char s_mode, PORT_t *cs_port, unsigned char cs_pin_mask
     ef6:	8f 92       	push	r8
     ef8:	af 92       	push	r10
     efa:	cf 92       	push	r12
     efc:	ef 92       	push	r14
     efe:	0f 93       	push	r16
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	ea 85       	ldd	r30, Y+10	; 0x0a
     f0a:	fb 85       	ldd	r31, Y+11	; 0x0b
{
	reinit(port, speed, Tx_Enable, Rx_Enable, c_mode, p_mode, s_mode, cs_port, cs_pin_mask
#ifdef _AVR_ATXMEGA32E5_H_INCLUDED
	, Uart0RelocatePins
#endif
	);
     f0c:	ad 85       	ldd	r26, Y+13	; 0x0d
     f0e:	af 93       	push	r26
     f10:	ac 85       	ldd	r26, Y+12	; 0x0c
     f12:	af 93       	push	r26
     f14:	ff 93       	push	r31
     f16:	ef 93       	push	r30
     f18:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN8Io_Usart6reinitEPV12USART_structmbbhhhP11PORT_structhb>
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
	//htimer.service_add((void *)&service, this);
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	0f 91       	pop	r16
     f2a:	ef 90       	pop	r14
     f2c:	cf 90       	pop	r12
     f2e:	af 90       	pop	r10
     f30:	8f 90       	pop	r8
     f32:	08 95       	ret

00000f34 <_ZN8Io_Usart8transmitEc>:
	}
}


bool Io_Usart::transmit(char data)
{
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	00 d0       	rcall	.+0      	; 0xf3a <_ZN8Io_Usart8transmitEc+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <_ZN8Io_Usart8transmitEc+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	26 2f       	mov	r18, r22
	volatile unsigned long timeout = UART_TX_TIMEOUT;
     f42:	40 ea       	ldi	r20, 0xA0	; 160
     f44:	56 e8       	ldi	r21, 0x86	; 134
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	49 83       	std	Y+1, r20	; 0x01
     f4c:	5a 83       	std	Y+2, r21	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	7c 83       	std	Y+4, r23	; 0x04
	/* Wait for empty transmit buffer */
	volatile USART_t* port = this->base_addr;
     f52:	dc 01       	movw	r26, r24
     f54:	18 96       	adiw	r26, 0x08	; 8
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	19 97       	sbiw	r26, 0x09	; 9
	while (!(port->STATUS & (USART_DREIF_bm))) {
     f5c:	12 c0       	rjmp	.+36     	; 0xf82 <_ZN8Io_Usart8transmitEc+0x4e>
		if (!timeout--)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	ab 81       	ldd	r26, Y+3	; 0x03
     f64:	bc 81       	ldd	r27, Y+4	; 0x04
     f66:	ac 01       	movw	r20, r24
     f68:	bd 01       	movw	r22, r26
     f6a:	41 50       	subi	r20, 0x01	; 1
     f6c:	51 09       	sbc	r21, r1
     f6e:	61 09       	sbc	r22, r1
     f70:	71 09       	sbc	r23, r1
     f72:	49 83       	std	Y+1, r20	; 0x01
     f74:	5a 83       	std	Y+2, r21	; 0x02
     f76:	6b 83       	std	Y+3, r22	; 0x03
     f78:	7c 83       	std	Y+4, r23	; 0x04
     f7a:	89 2b       	or	r24, r25
     f7c:	8a 2b       	or	r24, r26
     f7e:	8b 2b       	or	r24, r27
     f80:	31 f0       	breq	.+12     	; 0xf8e <_ZN8Io_Usart8transmitEc+0x5a>
bool Io_Usart::transmit(char data)
{
	volatile unsigned long timeout = UART_TX_TIMEOUT;
	/* Wait for empty transmit buffer */
	volatile USART_t* port = this->base_addr;
	while (!(port->STATUS & (USART_DREIF_bm))) {
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	85 ff       	sbrs	r24, 5
     f86:	eb cf       	rjmp	.-42     	; 0xf5e <_ZN8Io_Usart8transmitEc+0x2a>
		if (!timeout--)
			return false;
	}
	/* Put data into buffer, sends the data */
	port->DATA = data;
     f88:	20 83       	st	Z, r18
	return true;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <_ZN8Io_Usart8transmitEc+0x5c>
	volatile unsigned long timeout = UART_TX_TIMEOUT;
	/* Wait for empty transmit buffer */
	volatile USART_t* port = this->base_addr;
	while (!(port->STATUS & (USART_DREIF_bm))) {
		if (!timeout--)
			return false;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Put data into buffer, sends the data */
	port->DATA = data;
	return true;
}
     f90:	24 96       	adiw	r28, 0x04	; 4
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <_ZN8Io_Usart9txrx_byteEPh>:
	return true;
}

bool Io_Usart::txrx_byte(unsigned char *data)
{
	volatile USART_t* port = this->base_addr;
     f9c:	dc 01       	movw	r26, r24
     f9e:	18 96       	adiw	r26, 0x08	; 8
     fa0:	ed 91       	ld	r30, X+
     fa2:	fc 91       	ld	r31, X
     fa4:	19 97       	sbiw	r26, 0x09	; 9
	port->DATA = *data;
     fa6:	db 01       	movw	r26, r22
     fa8:	8c 91       	ld	r24, X
     faa:	80 83       	st	Z, r24
	while((~port->STATUS) & USART_RXCIF_bm);
     fac:	81 81       	ldd	r24, Z+1	; 0x01
     fae:	88 23       	and	r24, r24
     fb0:	ec f7       	brge	.-6      	; 0xfac <_ZN8Io_Usart9txrx_byteEPh+0x10>
	*data = port->DATA;
     fb2:	80 81       	ld	r24, Z
     fb4:	fb 01       	movw	r30, r22
     fb6:	80 83       	st	Z, r24
	return true;
}
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret

00000fbc <_ZN8Io_Usart7rx_buffEj>:
		cs_port->OUTSET = this->cs_pin_mask;
	return true;
}

bool Io_Usart::rx_buff(unsigned int BytesReceive)
{
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8c 01       	movw	r16, r24
	if(!spim_buff)
     fde:	dc 01       	movw	r26, r24
     fe0:	5b 96       	adiw	r26, 0x1b	; 27
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	5c 97       	sbiw	r26, 0x1c	; 28
     fe8:	89 2b       	or	r24, r25
     fea:	09 f4       	brne	.+2      	; 0xfee <_ZN8Io_Usart7rx_buffEj+0x32>
     fec:	f3 c0       	rjmp	.+486    	; 0x11d4 <_ZN8Io_Usart7rx_buffEj+0x218>
		return false;
	if(control_cs_pin)
     fee:	5d 96       	adiw	r26, 0x1d	; 29
     ff0:	8c 91       	ld	r24, X
     ff2:	5d 97       	sbiw	r26, 0x1d	; 29
     ff4:	88 23       	and	r24, r24
     ff6:	39 f0       	breq	.+14     	; 0x1006 <_ZN8Io_Usart7rx_buffEj+0x4a>
		cs_port->OUTCLR = this->cs_pin_mask;
     ff8:	1c 96       	adiw	r26, 0x0c	; 12
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	1d 97       	sbiw	r26, 0x0d	; 13
    1000:	52 96       	adiw	r26, 0x12	; 18
    1002:	8c 91       	ld	r24, X
    1004:	86 83       	std	Z+6, r24	; 0x06
	if(!dmarx)
    1006:	f8 01       	movw	r30, r16
    1008:	86 85       	ldd	r24, Z+14	; 0x0e
    100a:	97 85       	ldd	r25, Z+15	; 0x0f
    100c:	89 2b       	or	r24, r25
    100e:	61 f5       	brne	.+88     	; 0x1068 <_ZN8Io_Usart7rx_buffEj+0xac>
	{
		unsigned long cnt = 0;
		for (; cnt < BytesReceive; cnt++)
    1010:	4b 01       	movw	r8, r22
    1012:	a1 2c       	mov	r10, r1
    1014:	b1 2c       	mov	r11, r1
    1016:	81 14       	cp	r8, r1
    1018:	91 04       	cpc	r9, r1
    101a:	a1 04       	cpc	r10, r1
    101c:	b1 04       	cpc	r11, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <_ZN8Io_Usart7rx_buffEj+0x66>
    1020:	cd c0       	rjmp	.+410    	; 0x11bc <_ZN8Io_Usart7rx_buffEj+0x200>
    1022:	c1 2c       	mov	r12, r1
    1024:	d1 2c       	mov	r13, r1
    1026:	76 01       	movw	r14, r12
		{
			unsigned char tmp = 0xFF;
    1028:	77 24       	eor	r7, r7
    102a:	7a 94       	dec	r7
    102c:	79 82       	std	Y+1, r7	; 0x01
			if(txrx_byte(&tmp) == false)
    102e:	be 01       	movw	r22, r28
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	c8 01       	movw	r24, r16
    1036:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN8Io_Usart9txrx_byteEPh>
    103a:	88 23       	and	r24, r24
    103c:	09 f4       	brne	.+2      	; 0x1040 <_ZN8Io_Usart7rx_buffEj+0x84>
    103e:	cd c0       	rjmp	.+410    	; 0x11da <_ZN8Io_Usart7rx_buffEj+0x21e>
			return false;
			spim_buff[cnt] = tmp;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	d8 01       	movw	r26, r16
    1044:	5b 96       	adiw	r26, 0x1b	; 27
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	5c 97       	sbiw	r26, 0x1c	; 28
    104c:	ec 0d       	add	r30, r12
    104e:	fd 1d       	adc	r31, r13
    1050:	80 83       	st	Z, r24
	if(control_cs_pin)
		cs_port->OUTCLR = this->cs_pin_mask;
	if(!dmarx)
	{
		unsigned long cnt = 0;
		for (; cnt < BytesReceive; cnt++)
    1052:	bf ef       	ldi	r27, 0xFF	; 255
    1054:	cb 1a       	sub	r12, r27
    1056:	db 0a       	sbc	r13, r27
    1058:	eb 0a       	sbc	r14, r27
    105a:	fb 0a       	sbc	r15, r27
    105c:	c8 14       	cp	r12, r8
    105e:	d9 04       	cpc	r13, r9
    1060:	ea 04       	cpc	r14, r10
    1062:	fb 04       	cpc	r15, r11
    1064:	18 f3       	brcs	.-58     	; 0x102c <_ZN8Io_Usart7rx_buffEj+0x70>
    1066:	aa c0       	rjmp	.+340    	; 0x11bc <_ZN8Io_Usart7rx_buffEj+0x200>
			spim_buff[cnt] = tmp;
		}
	}
	else
	{
		unsigned char tmp_ff = 0xFF;
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	89 83       	std	Y+1, r24	; 0x01
		dmatx->ADDR = (unsigned int)&tmp_ff;
    106c:	d8 01       	movw	r26, r16
    106e:	00 88       	ldd	r0, Z+16	; 0x10
    1070:	f1 89       	ldd	r31, Z+17	; 0x11
    1072:	e0 2d       	mov	r30, r0
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	80 87       	std	Z+8, r24	; 0x08
    107a:	91 87       	std	Z+9, r25	; 0x09
		dmatx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_FIXED_gc;
    107c:	50 96       	adiw	r26, 0x10	; 16
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	51 97       	sbiw	r26, 0x11	; 17
    1084:	12 82       	std	Z+2, r1	; 0x02
		dmatx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1086:	50 96       	adiw	r26, 0x10	; 16
    1088:	ed 91       	ld	r30, X+
    108a:	fc 91       	ld	r31, X
    108c:	51 97       	sbiw	r26, 0x11	; 17
    108e:	8d e4       	ldi	r24, 0x4D	; 77
    1090:	84 83       	std	Z+4, r24	; 0x04

		dmarx->ADDR = (unsigned int)spim_buff;
    1092:	1e 96       	adiw	r26, 0x0e	; 14
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	1f 97       	sbiw	r26, 0x0f	; 15
    109a:	5b 96       	adiw	r26, 0x1b	; 27
    109c:	8d 91       	ld	r24, X+
    109e:	9c 91       	ld	r25, X
    10a0:	5c 97       	sbiw	r26, 0x1c	; 28
    10a2:	80 87       	std	Z+8, r24	; 0x08
    10a4:	91 87       	std	Z+9, r25	; 0x09
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
    10a6:	1e 96       	adiw	r26, 0x0e	; 14
    10a8:	ed 91       	ld	r30, X+
    10aa:	fc 91       	ld	r31, X
    10ac:	1f 97       	sbiw	r26, 0x0f	; 15
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	82 83       	std	Z+2, r24	; 0x02
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    10b2:	1e 96       	adiw	r26, 0x0e	; 14
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	1f 97       	sbiw	r26, 0x0f	; 15
    10ba:	8c e4       	ldi	r24, 0x4C	; 76
    10bc:	84 83       	std	Z+4, r24	; 0x04
		unsigned int cnt = BytesReceive;
		for(; cnt >= 512; cnt -= 512)
    10be:	61 15       	cp	r22, r1
    10c0:	b2 e0       	ldi	r27, 0x02	; 2
    10c2:	7b 07       	cpc	r23, r27
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <_ZN8Io_Usart7rx_buffEj+0x10c>
    10c6:	3f c0       	rjmp	.+126    	; 0x1146 <_ZN8Io_Usart7rx_buffEj+0x18a>
		dmatx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;

		dmarx->ADDR = (unsigned int)spim_buff;
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
		unsigned int cnt = BytesReceive;
    10c8:	cb 01       	movw	r24, r22
		for(; cnt >= 512; cnt -= 512)
		{
			dmarx->TRFCNT = 0;
			dmarx->CTRLA = EDMA_CH_SINGLE_bm | EDMA_CH_REPEAT_bm;
    10ca:	34 e2       	ldi	r19, 0x24	; 36
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
		unsigned int cnt = BytesReceive;
		for(; cnt >= 512; cnt -= 512)
		{
			dmarx->TRFCNT = 0;
    10cc:	d8 01       	movw	r26, r16
    10ce:	1e 96       	adiw	r26, 0x0e	; 14
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	1f 97       	sbiw	r26, 0x0f	; 15
    10d6:	16 82       	std	Z+6, r1	; 0x06
    10d8:	17 82       	std	Z+7, r1	; 0x07
			dmarx->CTRLA = EDMA_CH_SINGLE_bm | EDMA_CH_REPEAT_bm;
    10da:	1e 96       	adiw	r26, 0x0e	; 14
    10dc:	ed 91       	ld	r30, X+
    10de:	fc 91       	ld	r31, X
    10e0:	1f 97       	sbiw	r26, 0x0f	; 15
    10e2:	30 83       	st	Z, r19
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
    10e4:	1e 96       	adiw	r26, 0x0e	; 14
    10e6:	ed 91       	ld	r30, X+
    10e8:	fc 91       	ld	r31, X
    10ea:	1f 97       	sbiw	r26, 0x0f	; 15
    10ec:	20 81       	ld	r18, Z
    10ee:	20 68       	ori	r18, 0x80	; 128
    10f0:	20 83       	st	Z, r18
			dmatx->TRFCNT = 0;
    10f2:	50 96       	adiw	r26, 0x10	; 16
    10f4:	ed 91       	ld	r30, X+
    10f6:	fc 91       	ld	r31, X
    10f8:	51 97       	sbiw	r26, 0x11	; 17
    10fa:	16 82       	std	Z+6, r1	; 0x06
    10fc:	17 82       	std	Z+7, r1	; 0x07
			dmatx->CTRLA = EDMA_CH_SINGLE_bm | EDMA_CH_REPEAT_bm;
    10fe:	50 96       	adiw	r26, 0x10	; 16
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	51 97       	sbiw	r26, 0x11	; 17
    1106:	30 83       	st	Z, r19
			dmatx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
    1108:	50 96       	adiw	r26, 0x10	; 16
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	51 97       	sbiw	r26, 0x11	; 17
    1110:	20 81       	ld	r18, Z
    1112:	20 68       	ori	r18, 0x80	; 128
    1114:	20 83       	st	Z, r18
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
    1116:	1e 96       	adiw	r26, 0x0e	; 14
    1118:	ed 91       	ld	r30, X+
    111a:	fc 91       	ld	r31, X
    111c:	1f 97       	sbiw	r26, 0x0f	; 15
    111e:	21 81       	ldd	r18, Z+1	; 0x01
    1120:	24 ff       	sbrs	r18, 4
    1122:	fd cf       	rjmp	.-6      	; 0x111e <_ZN8Io_Usart7rx_buffEj+0x162>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
    1124:	21 81       	ldd	r18, Z+1	; 0x01
    1126:	20 61       	ori	r18, 0x10	; 16
    1128:	21 83       	std	Z+1, r18	; 0x01
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
    112a:	d8 01       	movw	r26, r16
    112c:	1e 96       	adiw	r26, 0x0e	; 14
    112e:	ed 91       	ld	r30, X+
    1130:	fc 91       	ld	r31, X
    1132:	1f 97       	sbiw	r26, 0x0f	; 15
    1134:	21 81       	ldd	r18, Z+1	; 0x01
    1136:	20 61       	ori	r18, 0x10	; 16
    1138:	21 83       	std	Z+1, r18	; 0x01

		dmarx->ADDR = (unsigned int)spim_buff;
		dmarx->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
		dmarx->TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
		unsigned int cnt = BytesReceive;
		for(; cnt >= 512; cnt -= 512)
    113a:	92 50       	subi	r25, 0x02	; 2
    113c:	81 15       	cp	r24, r1
    113e:	b2 e0       	ldi	r27, 0x02	; 2
    1140:	9b 07       	cpc	r25, r27
    1142:	20 f6       	brcc	.-120    	; 0x10cc <_ZN8Io_Usart7rx_buffEj+0x110>
    1144:	71 70       	andi	r23, 0x01	; 1
			dmatx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
		}
		if(cnt)
    1146:	61 15       	cp	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	c1 f1       	breq	.+112    	; 0x11bc <_ZN8Io_Usart7rx_buffEj+0x200>
		{
			dmarx->TRFCNT = cnt;
    114c:	d8 01       	movw	r26, r16
    114e:	1e 96       	adiw	r26, 0x0e	; 14
    1150:	ed 91       	ld	r30, X+
    1152:	fc 91       	ld	r31, X
    1154:	1f 97       	sbiw	r26, 0x0f	; 15
    1156:	66 83       	std	Z+6, r22	; 0x06
    1158:	77 83       	std	Z+7, r23	; 0x07
			dmarx->CTRLA = EDMA_CH_SINGLE_bm | EDMA_CH_REPEAT_bm;
    115a:	1e 96       	adiw	r26, 0x0e	; 14
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	1f 97       	sbiw	r26, 0x0f	; 15
    1162:	84 e2       	ldi	r24, 0x24	; 36
    1164:	80 83       	st	Z, r24
			dmarx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
    1166:	1e 96       	adiw	r26, 0x0e	; 14
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	1f 97       	sbiw	r26, 0x0f	; 15
    116e:	90 81       	ld	r25, Z
    1170:	90 68       	ori	r25, 0x80	; 128
    1172:	90 83       	st	Z, r25
			dmatx->TRFCNT = cnt;
    1174:	50 96       	adiw	r26, 0x10	; 16
    1176:	ed 91       	ld	r30, X+
    1178:	fc 91       	ld	r31, X
    117a:	51 97       	sbiw	r26, 0x11	; 17
    117c:	66 83       	std	Z+6, r22	; 0x06
    117e:	77 83       	std	Z+7, r23	; 0x07
			dmatx->CTRLA = EDMA_CH_SINGLE_bm | EDMA_CH_REPEAT_bm;
    1180:	50 96       	adiw	r26, 0x10	; 16
    1182:	ed 91       	ld	r30, X+
    1184:	fc 91       	ld	r31, X
    1186:	51 97       	sbiw	r26, 0x11	; 17
    1188:	80 83       	st	Z, r24
			dmatx->CTRLA |= EDMA_CH_ENABLE_bm/* | EDMA_CH_BURSTLEN_bm*/;
    118a:	50 96       	adiw	r26, 0x10	; 16
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	51 97       	sbiw	r26, 0x11	; 17
    1192:	80 81       	ld	r24, Z
    1194:	80 68       	ori	r24, 0x80	; 128
    1196:	80 83       	st	Z, r24
			while(!(dmarx->CTRLB & EDMA_CH_TRNIF_bm));
    1198:	1e 96       	adiw	r26, 0x0e	; 14
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	1f 97       	sbiw	r26, 0x0f	; 15
    11a0:	81 81       	ldd	r24, Z+1	; 0x01
    11a2:	84 ff       	sbrs	r24, 4
    11a4:	fd cf       	rjmp	.-6      	; 0x11a0 <_ZN8Io_Usart7rx_buffEj+0x1e4>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	80 61       	ori	r24, 0x10	; 16
    11aa:	81 83       	std	Z+1, r24	; 0x01
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
    11ac:	d8 01       	movw	r26, r16
    11ae:	1e 96       	adiw	r26, 0x0e	; 14
    11b0:	ed 91       	ld	r30, X+
    11b2:	fc 91       	ld	r31, X
    11b4:	1f 97       	sbiw	r26, 0x0f	; 15
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	if(control_cs_pin)
    11bc:	f8 01       	movw	r30, r16
    11be:	85 8d       	ldd	r24, Z+29	; 0x1d
    11c0:	88 23       	and	r24, r24
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <_ZN8Io_Usart7rx_buffEj+0x21c>
		cs_port->OUTSET = this->cs_pin_mask;
    11c4:	04 84       	ldd	r0, Z+12	; 0x0c
    11c6:	f5 85       	ldd	r31, Z+13	; 0x0d
    11c8:	e0 2d       	mov	r30, r0
    11ca:	d8 01       	movw	r26, r16
    11cc:	52 96       	adiw	r26, 0x12	; 18
    11ce:	9c 91       	ld	r25, X
    11d0:	95 83       	std	Z+5, r25	; 0x05
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <_ZN8Io_Usart7rx_buffEj+0x21e>
}

bool Io_Usart::rx_buff(unsigned int BytesReceive)
{
	if(!spim_buff)
		return false;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <_ZN8Io_Usart7rx_buffEj+0x21e>
			dmarx->CTRLB |= EDMA_CH_TRNIF_bm;
		}
	}
	if(control_cs_pin)
		cs_port->OUTSET = this->cs_pin_mask;
	return true;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
}
    11da:	0f 90       	pop	r0
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	7f 90       	pop	r7
    11f6:	08 95       	ret

000011f8 <_ZN8Io_Usart8set_baudEj>:
	return true;
}

void Io_Usart::set_baud(unsigned int speed)
{
	base_addr->BAUDCTRLA = (unsigned char)speed;
    11f8:	dc 01       	movw	r26, r24
    11fa:	18 96       	adiw	r26, 0x08	; 8
    11fc:	ed 91       	ld	r30, X+
    11fe:	fc 91       	ld	r31, X
    1200:	19 97       	sbiw	r26, 0x09	; 9
    1202:	66 83       	std	Z+6, r22	; 0x06
	base_addr->BAUDCTRLB = (unsigned char)((speed>>8) & 0x0F);
    1204:	18 96       	adiw	r26, 0x08	; 8
    1206:	ed 91       	ld	r30, X+
    1208:	fc 91       	ld	r31, X
    120a:	19 97       	sbiw	r26, 0x09	; 9
    120c:	7f 70       	andi	r23, 0x0F	; 15
    120e:	77 83       	std	Z+7, r23	; 0x07
    1210:	08 95       	ret

00001212 <_ZN8Io_Usart9cs_assertEv>:
}

void Io_Usart::cs_assert()
{
	cs_port->OUTCLR = cs_pin_mask;
    1212:	dc 01       	movw	r26, r24
    1214:	1c 96       	adiw	r26, 0x0c	; 12
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	1d 97       	sbiw	r26, 0x0d	; 13
    121c:	52 96       	adiw	r26, 0x12	; 18
    121e:	8c 91       	ld	r24, X
    1220:	86 83       	std	Z+6, r24	; 0x06
    1222:	08 95       	ret

00001224 <_ZN8Io_Usart10cs_deasertEv>:
}

void Io_Usart::cs_deasert()
{
	cs_port->OUTSET = cs_pin_mask;
    1224:	dc 01       	movw	r26, r24
    1226:	1c 96       	adiw	r26, 0x0c	; 12
    1228:	ed 91       	ld	r30, X+
    122a:	fc 91       	ld	r31, X
    122c:	1d 97       	sbiw	r26, 0x0d	; 13
    122e:	52 96       	adiw	r26, 0x12	; 18
    1230:	8c 91       	ld	r24, X
    1232:	85 83       	std	Z+5, r24	; 0x05
    1234:	08 95       	ret

00001236 <_ZN8Io_Usart7Put_StrEPKc>:
	*data = port->DATA;
	return true;
}

void Io_Usart::Put_Str(const char *data/*, unsigned char len*/)
{
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	8c 01       	movw	r16, r24
    1240:	eb 01       	movw	r28, r22
	//unsigned int cnt = 0;
	while(*data)
    1242:	68 81       	ld	r22, Y
    1244:	66 23       	and	r22, r22
    1246:	39 f0       	breq	.+14     	; 0x1256 <_ZN8Io_Usart7Put_StrEPKc+0x20>
    1248:	21 96       	adiw	r28, 0x01	; 1
	{
		//if(/*len == -1 && */*data == 0)
		//	break;
		transmit((unsigned char)*data++);
    124a:	c8 01       	movw	r24, r16
    124c:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN8Io_Usart8transmitEc>
}

void Io_Usart::Put_Str(const char *data/*, unsigned char len*/)
{
	//unsigned int cnt = 0;
	while(*data)
    1250:	69 91       	ld	r22, Y+
    1252:	61 11       	cpse	r22, r1
    1254:	fa cf       	rjmp	.-12     	; 0x124a <_ZN8Io_Usart7Put_StrEPKc+0x14>
	{
		//if(/*len == -1 && */*data == 0)
		//	break;
		transmit((unsigned char)*data++);
	}
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <_Z16uart_int_handlerP8Io_Usart>:
	return uIdx;
}


void uart_int_handler(Io_Usart *data) 
{
    1260:	dc 01       	movw	r26, r24
	if(!data)
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	81 f0       	breq	.+32     	; 0x1286 <_Z16uart_int_handlerP8Io_Usart+0x26>
		return;
	//Io_Usart usart;
	char RxChr = data->base_addr->DATA;
    1266:	18 96       	adiw	r26, 0x08	; 8
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	19 97       	sbiw	r26, 0x09	; 9
    126e:	60 81       	ld	r22, Z
	//SniffSmart.char_capture(NULL, RxChr);
	if(data->rx_char_receive_func)
    1270:	14 96       	adiw	r26, 0x04	; 4
    1272:	ed 91       	ld	r30, X+
    1274:	fc 91       	ld	r31, X
    1276:	15 97       	sbiw	r26, 0x05	; 5
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	29 f0       	breq	.+10     	; 0x1286 <_Z16uart_int_handlerP8Io_Usart+0x26>
		data->rx_char_receive_func(data->rx_char_receive_struct, RxChr);
    127c:	16 96       	adiw	r26, 0x06	; 6
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	17 97       	sbiw	r26, 0x07	; 7
    1284:	09 95       	icall
    1286:	08 95       	ret

00001288 <__vector_23>:
	if(data->rx_cnt > RxBuffLen) data->rx_cnt = 0;*/
}

#if defined(USARTC0) && defined(USE_UART0)
ISR(USARTC0_RXC_vect)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
	if(io_usart0_service) 
    12aa:	80 91 14 20 	lds	r24, 0x2014
    12ae:	90 91 15 20 	lds	r25, 0x2015
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	11 f0       	breq	.+4      	; 0x12ba <__vector_23+0x32>
		uart_int_handler(io_usart0_service);
    12b6:	0e 94 30 09 	call	0x1260	; 0x1260 <_Z16uart_int_handlerP8Io_Usart>
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_40>:
}
#endif

#if defined(USARTD0) && defined(USE_UART2)
ISR(USARTD0_RXC_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	if(io_usart2_service)
    12fe:	80 91 12 20 	lds	r24, 0x2012
    1302:	90 91 13 20 	lds	r25, 0x2013
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	11 f0       	breq	.+4      	; 0x130e <__vector_40+0x32>
		uart_int_handler(io_usart2_service);
    130a:	0e 94 30 09 	call	0x1260	; 0x1260 <_Z16uart_int_handlerP8Io_Usart>
}
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <_ZN8Main_AppC1Ev>:

volatile unsigned long buffer_change_count;
volatile unsigned long frame_count;
	unsigned char buffer[512];

Main_App::Main_App()
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
{
#ifdef USE_UART0
	card_usart.dmarx = &EDMA.CH1;
    1334:	80 e2       	ldi	r24, 0x20	; 32
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	80 93 07 25 	sts	0x2507, r24
    133c:	90 93 08 25 	sts	0x2508, r25
	card_usart.dmatx = &EDMA.CH0;
    1340:	80 e1       	ldi	r24, 0x10	; 16
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	80 93 09 25 	sts	0x2509, r24
    1348:	90 93 0a 25 	sts	0x250A, r25
#endif
	memset(buffer, 0, 512);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	ec e1       	ldi	r30, 0x1C	; 28
    1352:	f0 e2       	ldi	r31, 0x20	; 32
    1354:	df 01       	movw	r26, r30
    1356:	9c 01       	movw	r18, r24
    1358:	1d 92       	st	X+, r1
    135a:	21 50       	subi	r18, 0x01	; 1
    135c:	30 40       	sbci	r19, 0x00	; 0
    135e:	e1 f7       	brne	.-8      	; 0x1358 <_ZN8Main_AppC1Ev+0x28>
	sd_spi.read(buffer,0, 1);
    1360:	01 e0       	ldi	r16, 0x01	; 1
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	bf 01       	movw	r22, r30
    136c:	88 ed       	ldi	r24, 0xD8	; 216
    136e:	94 e2       	ldi	r25, 0x24	; 36
    1370:	0e 94 83 03 	call	0x706	; 0x706 <_ZN6SD_Spi4readEPhmj>
}
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <_Z18terminal_print_hexh>:

void terminal_print_hex(unsigned char data)
{
    137a:	cf 93       	push	r28
	unsigned char ch1 = data >> 4;
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	35 95       	asr	r19
    1382:	27 95       	ror	r18
    1384:	35 95       	asr	r19
    1386:	27 95       	ror	r18
    1388:	35 95       	asr	r19
    138a:	27 95       	ror	r18
    138c:	35 95       	asr	r19
    138e:	27 95       	ror	r18
	unsigned char ch2 = data & 0x0F;
    1390:	c8 2f       	mov	r28, r24
    1392:	cf 70       	andi	r28, 0x0F	; 15
	if(ch1 < 10)
    1394:	2a 30       	cpi	r18, 0x0A	; 10
    1396:	38 f4       	brcc	.+14     	; 0x13a6 <_Z18terminal_print_hexh+0x2c>
	usart.transmit(ch1 + '0');
    1398:	60 e3       	ldi	r22, 0x30	; 48
    139a:	62 0f       	add	r22, r18
    139c:	87 e1       	ldi	r24, 0x17	; 23
    139e:	95 e2       	ldi	r25, 0x25	; 37
    13a0:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN8Io_Usart8transmitEc>
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <_Z18terminal_print_hexh+0x38>
	else
	usart.transmit((ch1 - 10) + 'A');
    13a6:	67 e3       	ldi	r22, 0x37	; 55
    13a8:	62 0f       	add	r22, r18
    13aa:	87 e1       	ldi	r24, 0x17	; 23
    13ac:	95 e2       	ldi	r25, 0x25	; 37
    13ae:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN8Io_Usart8transmitEc>
	if(ch2 < 10)
    13b2:	ca 30       	cpi	r28, 0x0A	; 10
    13b4:	38 f4       	brcc	.+14     	; 0x13c4 <_Z18terminal_print_hexh+0x4a>
	usart.transmit(ch2 + '0');
    13b6:	60 e3       	ldi	r22, 0x30	; 48
    13b8:	6c 0f       	add	r22, r28
    13ba:	87 e1       	ldi	r24, 0x17	; 23
    13bc:	95 e2       	ldi	r25, 0x25	; 37
    13be:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN8Io_Usart8transmitEc>
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <_Z18terminal_print_hexh+0x56>
	else
	usart.transmit((ch2 - 10) + 'A');
    13c4:	67 e3       	ldi	r22, 0x37	; 55
    13c6:	6c 0f       	add	r22, r28
    13c8:	87 e1       	ldi	r24, 0x17	; 23
    13ca:	95 e2       	ldi	r25, 0x25	; 37
    13cc:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN8Io_Usart8transmitEc>
}
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <main>:
unsigned char old_avarage = 0;
bool show_next_frame = false;


int main(void)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	1f 92       	push	r1
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    while (1) 
    {
		if(buffer_change_count != ov7690.buffer_change_count && (ov7690.buffer_change_count & 0x07) == 0)
    13de:	0f 2e       	mov	r0, r31
    13e0:	f7 e2       	ldi	r31, 0x27	; 39
    13e2:	ef 2e       	mov	r14, r31
    13e4:	f2 e2       	ldi	r31, 0x22	; 34
    13e6:	ff 2e       	mov	r15, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	01 eb       	ldi	r16, 0xB1	; 177
    13ec:	14 e2       	ldi	r17, 0x24	; 36
				}
				usart.Put_Str("\r\n");
			}
			//usart.transmit(254);
		}
		if(frame_count != ov7690.frame_count)
    13ee:	0f 2e       	mov	r0, r31
    13f0:	fb e2       	ldi	r31, 0x2B	; 43
    13f2:	cf 2e       	mov	r12, r31
    13f4:	f2 e2       	ldi	r31, 0x22	; 34
    13f6:	df 2e       	mov	r13, r31
    13f8:	f0 2d       	mov	r31, r0
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f1 e3       	ldi	r31, 0x31	; 49
    13fe:	af 2e       	mov	r10, r31
    1400:	f2 e2       	ldi	r31, 0x22	; 34
    1402:	bf 2e       	mov	r11, r31
    1404:	f0 2d       	mov	r31, r0
			}
			show_next_frame = false;
			if(old_avarage != avarage_level)
			{
				old_avarage = avarage_level;
				show_next_frame = true;
    1406:	77 24       	eor	r7, r7
    1408:	73 94       	inc	r7
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		if(buffer_change_count != ov7690.buffer_change_count && (ov7690.buffer_change_count & 0x07) == 0)
    140a:	f7 01       	movw	r30, r14
    140c:	40 81       	ld	r20, Z
    140e:	51 81       	ldd	r21, Z+1	; 0x01
    1410:	62 81       	ldd	r22, Z+2	; 0x02
    1412:	73 81       	ldd	r23, Z+3	; 0x03
    1414:	80 91 20 22 	lds	r24, 0x2220
    1418:	90 91 21 22 	lds	r25, 0x2221
    141c:	a0 91 22 22 	lds	r26, 0x2222
    1420:	b0 91 23 22 	lds	r27, 0x2223
    1424:	48 17       	cp	r20, r24
    1426:	59 07       	cpc	r21, r25
    1428:	6a 07       	cpc	r22, r26
    142a:	7b 07       	cpc	r23, r27
    142c:	09 f4       	brne	.+2      	; 0x1430 <main+0x5c>
    142e:	40 c0       	rjmp	.+128    	; 0x14b0 <main+0xdc>
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	a2 81       	ldd	r26, Z+2	; 0x02
    1436:	b3 81       	ldd	r27, Z+3	; 0x03
    1438:	87 70       	andi	r24, 0x07	; 7
    143a:	99 27       	eor	r25, r25
    143c:	aa 27       	eor	r26, r26
    143e:	bb 27       	eor	r27, r27
    1440:	89 2b       	or	r24, r25
    1442:	8a 2b       	or	r24, r26
    1444:	8b 2b       	or	r24, r27
    1446:	09 f4       	brne	.+2      	; 0x144a <main+0x76>
    1448:	8c c0       	rjmp	.+280    	; 0x1562 <main+0x18e>
    144a:	32 c0       	rjmp	.+100    	; 0x14b0 <main+0xdc>
		{
			if(show_next_frame)
			{
				buffer_change_count = ov7690.buffer_change_count;
    144c:	f7 01       	movw	r30, r14
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	a2 81       	ldd	r26, Z+2	; 0x02
    1454:	b3 81       	ldd	r27, Z+3	; 0x03
    1456:	80 93 20 22 	sts	0x2220, r24
    145a:	90 93 21 22 	sts	0x2221, r25
    145e:	a0 93 22 22 	sts	0x2222, r26
    1462:	b0 93 23 22 	sts	0x2223, r27
    1466:	f5 01       	movw	r30, r10
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <main+0xc2>
					
					unsigned int cnt2 = 0;
					unsigned int tmp = 0;
					for (; cnt2 < (MULTIPLYER * BYTES_PER_PIXEL); cnt2++)
					{
							tmp += ov7690.buff1[cnt++];
    146a:	81 91       	ld	r24, Z+
    146c:	28 0f       	add	r18, r24
    146e:	31 1d       	adc	r19, r1
				for (; cnt < BYTES_PER_PIXEL * OV7690_BUFF_LEN;)
				{
					
					unsigned int cnt2 = 0;
					unsigned int tmp = 0;
					for (; cnt2 < (MULTIPLYER * BYTES_PER_PIXEL); cnt2++)
    1470:	e8 15       	cp	r30, r8
    1472:	f9 05       	cpc	r31, r9
    1474:	d1 f7       	brne	.-12     	; 0x146a <main+0x96>
					{
							tmp += ov7690.buff1[cnt++];
					}
					terminal_print_hex(tmp / MULTIPLYER * BYTES_PER_PIXEL);
    1476:	ad ec       	ldi	r26, 0xCD	; 205
    1478:	bc ec       	ldi	r27, 0xCC	; 204
    147a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__umulhisi3>
    147e:	96 95       	lsr	r25
    1480:	87 95       	ror	r24
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z18terminal_print_hexh>
		{
			if(show_next_frame)
			{
				buffer_change_count = ov7690.buffer_change_count;
				unsigned int cnt = 0;
				for (; cnt < BYTES_PER_PIXEL * OV7690_BUFF_LEN;)
    148e:	80 16       	cp	r8, r16
    1490:	91 06       	cpc	r9, r17
    1492:	41 f0       	breq	.+16     	; 0x14a4 <main+0xd0>
    1494:	f4 01       	movw	r30, r8
    1496:	4f 01       	movw	r8, r30
    1498:	8a e0       	ldi	r24, 0x0A	; 10
    149a:	88 0e       	add	r8, r24
    149c:	91 1c       	adc	r9, r1
unsigned char old_avarage = 0;
bool show_next_frame = false;


int main(void)
{
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	e3 cf       	rjmp	.-58     	; 0x146a <main+0x96>
					{
							tmp += ov7690.buff1[cnt++];
					}
					terminal_print_hex(tmp / MULTIPLYER * BYTES_PER_PIXEL);
				}
				usart.Put_Str("\r\n");
    14a4:	6a e0       	ldi	r22, 0x0A	; 10
    14a6:	70 e2       	ldi	r23, 0x20	; 32
    14a8:	87 e1       	ldi	r24, 0x17	; 23
    14aa:	95 e2       	ldi	r25, 0x25	; 37
    14ac:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN8Io_Usart7Put_StrEPKc>
			}
			//usart.transmit(254);
		}
		if(frame_count != ov7690.frame_count)
    14b0:	f6 01       	movw	r30, r12
    14b2:	40 81       	ld	r20, Z
    14b4:	51 81       	ldd	r21, Z+1	; 0x01
    14b6:	62 81       	ldd	r22, Z+2	; 0x02
    14b8:	73 81       	ldd	r23, Z+3	; 0x03
    14ba:	80 91 1c 22 	lds	r24, 0x221C
    14be:	90 91 1d 22 	lds	r25, 0x221D
    14c2:	a0 91 1e 22 	lds	r26, 0x221E
    14c6:	b0 91 1f 22 	lds	r27, 0x221F
    14ca:	48 17       	cp	r20, r24
    14cc:	59 07       	cpc	r21, r25
    14ce:	6a 07       	cpc	r22, r26
    14d0:	7b 07       	cpc	r23, r27
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <main+0x102>
    14d4:	9a cf       	rjmp	.-204    	; 0x140a <main+0x36>
		{
			frame_count = ov7690.frame_count;
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	a2 81       	ldd	r26, Z+2	; 0x02
    14dc:	b3 81       	ldd	r27, Z+3	; 0x03
    14de:	80 93 1c 22 	sts	0x221C, r24
    14e2:	90 93 1d 22 	sts	0x221D, r25
    14e6:	a0 93 1e 22 	sts	0x221E, r26
    14ea:	b0 93 1f 22 	sts	0x221F, r27
			unsigned long tmp = buffer_change_count - last;
    14ee:	80 91 20 22 	lds	r24, 0x2220
    14f2:	90 91 21 22 	lds	r25, 0x2221
    14f6:	a0 91 22 22 	lds	r26, 0x2222
    14fa:	b0 91 23 22 	lds	r27, 0x2223
			last = buffer_change_count;
    14fe:	80 91 20 22 	lds	r24, 0x2220
    1502:	90 91 21 22 	lds	r25, 0x2221
    1506:	a0 91 22 22 	lds	r26, 0x2222
    150a:	b0 91 23 22 	lds	r27, 0x2223
    150e:	80 93 18 20 	sts	0x2018, r24
    1512:	90 93 19 20 	sts	0x2019, r25
    1516:	a0 93 1a 20 	sts	0x201A, r26
    151a:	b0 93 1b 20 	sts	0x201B, r27
			//usart.transmit(255);
			unsigned char avarage_level;
			ov7690.reg_read(0x04, &avarage_level);
    151e:	ae 01       	movw	r20, r28
    1520:	4f 5f       	subi	r20, 0xFF	; 255
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	64 e0       	ldi	r22, 0x04	; 4
    1526:	85 e2       	ldi	r24, 0x25	; 37
    1528:	92 e2       	ldi	r25, 0x22	; 34
    152a:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN6Ov76908reg_readEhPh>
			if(show_next_frame)
    152e:	80 91 16 20 	lds	r24, 0x2016
    1532:	88 23       	and	r24, r24
    1534:	49 f0       	breq	.+18     	; 0x1548 <main+0x174>
			{
				terminal_print_hex(avarage_level);
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z18terminal_print_hexh>
				usart.Put_Str("\n\r");
    153c:	6d e0       	ldi	r22, 0x0D	; 13
    153e:	70 e2       	ldi	r23, 0x20	; 32
    1540:	87 e1       	ldi	r24, 0x17	; 23
    1542:	95 e2       	ldi	r25, 0x25	; 37
    1544:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN8Io_Usart7Put_StrEPKc>
			}
			show_next_frame = false;
    1548:	10 92 16 20 	sts	0x2016, r1
			if(old_avarage != avarage_level)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	90 91 17 20 	lds	r25, 0x2017
    1552:	98 17       	cp	r25, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <main+0x184>
    1556:	59 cf       	rjmp	.-334    	; 0x140a <main+0x36>
			{
				old_avarage = avarage_level;
    1558:	80 93 17 20 	sts	0x2017, r24
				show_next_frame = true;
    155c:	70 92 16 20 	sts	0x2016, r7
    1560:	54 cf       	rjmp	.-344    	; 0x140a <main+0x36>
    /* Replace with your application code */
    while (1) 
    {
		if(buffer_change_count != ov7690.buffer_change_count && (ov7690.buffer_change_count & 0x07) == 0)
		{
			if(show_next_frame)
    1562:	80 91 16 20 	lds	r24, 0x2016
    1566:	81 11       	cpse	r24, r1
    1568:	71 cf       	rjmp	.-286    	; 0x144c <main+0x78>
    156a:	a2 cf       	rjmp	.-188    	; 0x14b0 <main+0xdc>

0000156c <_GLOBAL__sub_I_FCPU>:
				old_avarage = avarage_level;
				show_next_frame = true;
			}
		}
    }
}
    156c:	8f 92       	push	r8
    156e:	af 92       	push	r10
    1570:	cf 92       	push	r12
    1572:	ef 92       	push	r14
    1574:	0f 93       	push	r16
#include "cmd_parser.h"
#include "dev_ov7690.h"

unsigned long FCPU = F_CPU;

Pm pm;
    1576:	87 e3       	ldi	r24, 0x37	; 55
    1578:	95 e2       	ldi	r25, 0x25	; 37
    157a:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN2PmC1Ev>
Dma dma;
    157e:	85 e3       	ldi	r24, 0x35	; 53
    1580:	95 e2       	ldi	r25, 0x25	; 37
    1582:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN3DmaC1Ev>
Io_Usart usart(&USE_UART2, UART_SPEED, true, true, usart.c_mode_async, usart.p_mode_none, usart.s_bits_one, NULL, -1, false);
    1586:	1f 92       	push	r1
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	8f 93       	push	r24
    158c:	1f 92       	push	r1
    158e:	1f 92       	push	r1
    1590:	81 2c       	mov	r8, r1
    1592:	a1 2c       	mov	r10, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	ee 24       	eor	r14, r14
    1598:	e3 94       	inc	r14
    159a:	01 e0       	ldi	r16, 0x01	; 1
    159c:	20 e4       	ldi	r18, 0x40	; 64
    159e:	32 e4       	ldi	r19, 0x42	; 66
    15a0:	4f e0       	ldi	r20, 0x0F	; 15
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	60 ec       	ldi	r22, 0xC0	; 192
    15a6:	79 e0       	ldi	r23, 0x09	; 9
    15a8:	87 e1       	ldi	r24, 0x17	; 23
    15aa:	95 e2       	ldi	r25, 0x25	; 37
    15ac:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN8Io_UsartC1EPV12USART_structmbbhhhP11PORT_structhb>
Io_Usart card_usart(&USE_UART0, 0, true, true, usart.c_mode_mspi, usart.p_mode_none, usart.s_bits_one, &CARD_CS_PORT, 1 << CARD_CS_PIN, true);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	8f 93       	push	r24
    15b4:	80 e1       	ldi	r24, 0x10	; 16
    15b6:	8f 93       	push	r24
    15b8:	86 e0       	ldi	r24, 0x06	; 6
    15ba:	8f 93       	push	r24
    15bc:	80 e4       	ldi	r24, 0x40	; 64
    15be:	8f 93       	push	r24
    15c0:	0f 2e       	mov	r0, r31
    15c2:	f0 ec       	ldi	r31, 0xC0	; 192
    15c4:	cf 2e       	mov	r12, r31
    15c6:	f0 2d       	mov	r31, r0
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	a9 01       	movw	r20, r18
    15ce:	60 ec       	ldi	r22, 0xC0	; 192
    15d0:	78 e0       	ldi	r23, 0x08	; 8
    15d2:	89 ef       	ldi	r24, 0xF9	; 249
    15d4:	94 e2       	ldi	r25, 0x24	; 36
    15d6:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN8Io_UsartC1EPV12USART_structmbbhhhP11PORT_structhb>
//Io_Spi card_spi(&USE_SPI0, 0, card_spi.mode_3, &CARD_CS_PORT, 1 << CARD_CS_PIN);
Io_Twi sensor_twi(&USE_TWI0);
    15da:	60 e8       	ldi	r22, 0x80	; 128
    15dc:	74 e0       	ldi	r23, 0x04	; 4
    15de:	82 ee       	ldi	r24, 0xE2	; 226
    15e0:	94 e2       	ldi	r25, 0x24	; 36
    15e2:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN6Io_TwiC1EPV10TWI_struct>
SD_Spi sd_spi(NULL, &card_usart);
    15e6:	49 ef       	ldi	r20, 0xF9	; 249
    15e8:	54 e2       	ldi	r21, 0x24	; 36
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	88 ed       	ldi	r24, 0xD8	; 216
    15f0:	94 e2       	ldi	r25, 0x24	; 36
    15f2:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN6SD_SpiC1EP6Io_SpiP8Io_Usart>
//SD_Spi sd_spi(&card_spi, NULL);
Cmd_Parser cmd_parser(&usart);
    15f6:	67 e1       	ldi	r22, 0x17	; 23
    15f8:	75 e2       	ldi	r23, 0x25	; 37
    15fa:	84 eb       	ldi	r24, 0xB4	; 180
    15fc:	94 e2       	ldi	r25, 0x24	; 36
    15fe:	0e 94 88 00 	call	0x110	; 0x110 <_ZN10Cmd_ParserC1EP8Io_Usart>
Ov7690 ov7690(&sensor_twi, &EDMA.CH2);
    1602:	40 e3       	ldi	r20, 0x30	; 48
    1604:	51 e0       	ldi	r21, 0x01	; 1
    1606:	62 ee       	ldi	r22, 0xE2	; 226
    1608:	74 e2       	ldi	r23, 0x24	; 36
    160a:	85 e2       	ldi	r24, 0x25	; 37
    160c:	92 e2       	ldi	r25, 0x22	; 34
    160e:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct>
Main_App main_app;
    1612:	84 e2       	ldi	r24, 0x24	; 36
    1614:	92 e2       	ldi	r25, 0x22	; 34
    1616:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN8Main_AppC1Ev>
    161a:	8d b7       	in	r24, 0x3d	; 61
    161c:	9e b7       	in	r25, 0x3e	; 62
    161e:	08 96       	adiw	r24, 0x08	; 8
    1620:	8d bf       	out	0x3d, r24	; 61
    1622:	9e bf       	out	0x3e, r25	; 62
				old_avarage = avarage_level;
				show_next_frame = true;
			}
		}
    }
}
    1624:	0f 91       	pop	r16
    1626:	ef 90       	pop	r14
    1628:	cf 90       	pop	r12
    162a:	af 90       	pop	r10
    162c:	8f 90       	pop	r8
    162e:	08 95       	ret

00001630 <_GLOBAL__sub_D_FCPU>:
Pm pm;
Dma dma;
Io_Usart usart(&USE_UART2, UART_SPEED, true, true, usart.c_mode_async, usart.p_mode_none, usart.s_bits_one, NULL, -1, false);
Io_Usart card_usart(&USE_UART0, 0, true, true, usart.c_mode_mspi, usart.p_mode_none, usart.s_bits_one, &CARD_CS_PORT, 1 << CARD_CS_PIN, true);
//Io_Spi card_spi(&USE_SPI0, 0, card_spi.mode_3, &CARD_CS_PORT, 1 << CARD_CS_PIN);
Io_Twi sensor_twi(&USE_TWI0);
    1630:	82 ee       	ldi	r24, 0xE2	; 226
    1632:	94 e2       	ldi	r25, 0x24	; 36
    1634:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN6Io_TwiD1Ev>
unsigned long FCPU = F_CPU;

Pm pm;
Dma dma;
Io_Usart usart(&USE_UART2, UART_SPEED, true, true, usart.c_mode_async, usart.p_mode_none, usart.s_bits_one, NULL, -1, false);
Io_Usart card_usart(&USE_UART0, 0, true, true, usart.c_mode_mspi, usart.p_mode_none, usart.s_bits_one, &CARD_CS_PORT, 1 << CARD_CS_PIN, true);
    1638:	89 ef       	ldi	r24, 0xF9	; 249
    163a:	94 e2       	ldi	r25, 0x24	; 36
    163c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN8Io_UsartD1Ev>

unsigned long FCPU = F_CPU;

Pm pm;
Dma dma;
Io_Usart usart(&USE_UART2, UART_SPEED, true, true, usart.c_mode_async, usart.p_mode_none, usart.s_bits_one, NULL, -1, false);
    1640:	87 e1       	ldi	r24, 0x17	; 23
    1642:	95 e2       	ldi	r25, 0x25	; 37
    1644:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN8Io_UsartD1Ev>
    1648:	08 95       	ret

0000164a <_ZN6Ov76908reg_readEhPh>:
}



bool Ov7690::reg_read(unsigned char reg, unsigned char *value)
{
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	8a 01       	movw	r16, r20
	this->io_twi->MasterSlaveAddr = OV7690_I2C_ADDR;
    1656:	fc 01       	movw	r30, r24
    1658:	e3 57       	subi	r30, 0x73	; 115
    165a:	fd 4f       	sbci	r31, 0xFD	; 253
    165c:	a0 81       	ld	r26, Z
    165e:	b1 81       	ldd	r27, Z+1	; 0x01
    1660:	81 e2       	ldi	r24, 0x21	; 33
    1662:	14 96       	adiw	r26, 0x04	; 4
    1664:	8c 93       	st	X, r24
	this->io_twi->TxBuff[0] = reg;
    1666:	a0 81       	ld	r26, Z
    1668:	b1 81       	ldd	r27, Z+1	; 0x01
    166a:	55 96       	adiw	r26, 0x15	; 21
    166c:	0d 90       	ld	r0, X+
    166e:	bc 91       	ld	r27, X
    1670:	a0 2d       	mov	r26, r0
    1672:	6c 93       	st	X, r22
	if(!io_twi->MasterWriteRead(io_twi, 1, 1))
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	bc 01       	movw	r22, r24
    1682:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_ZN6Io_Twi15MasterWriteReadEPS_jj>
    1686:	88 23       	and	r24, r24
    1688:	51 f0       	breq	.+20     	; 0x169e <_ZN6Ov76908reg_readEhPh+0x54>
		return false;
	*value = this->io_twi->RxBuff[0];
    168a:	c3 57       	subi	r28, 0x73	; 115
    168c:	dd 4f       	sbci	r29, 0xFD	; 253
    168e:	e8 81       	ld	r30, Y
    1690:	f9 81       	ldd	r31, Y+1	; 0x01
    1692:	03 88       	ldd	r0, Z+19	; 0x13
    1694:	f4 89       	ldd	r31, Z+20	; 0x14
    1696:	e0 2d       	mov	r30, r0
    1698:	90 81       	ld	r25, Z
    169a:	f8 01       	movw	r30, r16
    169c:	90 83       	st	Z, r25
	return true;
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	08 95       	ret

000016a8 <_ZN6Ov76909reg_writeEhh>:

bool Ov7690::reg_write(unsigned char reg, unsigned char value)
{
    16a8:	cf 93       	push	r28
    16aa:	c6 2f       	mov	r28, r22
	io_twi->MasterSlaveAddr = OV7690_I2C_ADDR;
    16ac:	fc 01       	movw	r30, r24
    16ae:	e3 57       	subi	r30, 0x73	; 115
    16b0:	fd 4f       	sbci	r31, 0xFD	; 253
    16b2:	a0 81       	ld	r26, Z
    16b4:	b1 81       	ldd	r27, Z+1	; 0x01
    16b6:	81 e2       	ldi	r24, 0x21	; 33
    16b8:	14 96       	adiw	r26, 0x04	; 4
    16ba:	8c 93       	st	X, r24
	io_twi->TxBuff[0] = reg;
    16bc:	a0 81       	ld	r26, Z
    16be:	b1 81       	ldd	r27, Z+1	; 0x01
    16c0:	55 96       	adiw	r26, 0x15	; 21
    16c2:	0d 90       	ld	r0, X+
    16c4:	bc 91       	ld	r27, X
    16c6:	a0 2d       	mov	r26, r0
    16c8:	6c 93       	st	X, r22
	io_twi->TxBuff[1] = value;
    16ca:	a0 81       	ld	r26, Z
    16cc:	b1 81       	ldd	r27, Z+1	; 0x01
    16ce:	55 96       	adiw	r26, 0x15	; 21
    16d0:	0d 90       	ld	r0, X+
    16d2:	bc 91       	ld	r27, X
    16d4:	a0 2d       	mov	r26, r0
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	4c 93       	st	X, r20
	if(!io_twi->MasterWriteRead(io_twi, 2, 0))
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	bc 01       	movw	r22, r24
    16e8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_ZN6Io_Twi15MasterWriteReadEPS_jj>
    16ec:	88 23       	and	r24, r24
    16ee:	59 f0       	breq	.+22     	; 0x1706 <_ZN6Ov76909reg_writeEhh+0x5e>
		return false;
	if (reg == 0x12/* && (value & 0x80)*/)
    16f0:	c2 31       	cpi	r28, 0x12	; 18
    16f2:	49 f4       	brne	.+18     	; 0x1706 <_ZN6Ov76909reg_writeEhh+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	33 ec       	ldi	r19, 0xC3	; 195
    16f8:	99 e0       	ldi	r25, 0x09	; 9
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	30 40       	sbci	r19, 0x00	; 0
    16fe:	90 40       	sbci	r25, 0x00	; 0
    1700:	e1 f7       	brne	.-8      	; 0x16fa <_ZN6Ov76909reg_writeEhh+0x52>
    1702:	00 c0       	rjmp	.+0      	; 0x1704 <_ZN6Ov76909reg_writeEhh+0x5c>
    1704:	00 00       	nop
		_delay_ms(100); /* Wait for reset to run */
	return true;
}
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s>:

bool Ov7690::write_array(const Ov7690_regval_list_t *vals)
{
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	8c 01       	movw	r16, r24
    1714:	eb 01       	movw	r28, r22
	while (pgm_read_byte(&vals->reg_num) != 0xff) {
    1716:	fe 01       	movw	r30, r28
    1718:	84 91       	lpm	r24, Z
    171a:	8f 3f       	cpi	r24, 0xFF	; 255
    171c:	89 f0       	breq	.+34     	; 0x1740 <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s+0x36>
    171e:	fe 01       	movw	r30, r28
    1720:	31 96       	adiw	r30, 0x01	; 1
		if (!reg_write(pgm_read_byte(&vals->reg_num), pgm_read_byte(&vals->value)))
    1722:	44 91       	lpm	r20, Z
    1724:	fb 01       	movw	r30, r22
    1726:	64 91       	lpm	r22, Z
    1728:	c8 01       	movw	r24, r16
    172a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN6Ov76909reg_writeEhh>
    172e:	88 23       	and	r24, r24
    1730:	41 f0       	breq	.+16     	; 0x1742 <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s+0x38>
		{
			/*abnormal state occur.*/
			return false;
		}
		vals++;
    1732:	22 96       	adiw	r28, 0x02	; 2
	return true;
}

bool Ov7690::write_array(const Ov7690_regval_list_t *vals)
{
	while (pgm_read_byte(&vals->reg_num) != 0xff) {
    1734:	be 01       	movw	r22, r28
    1736:	fe 01       	movw	r30, r28
    1738:	94 91       	lpm	r25, Z
    173a:	9f 3f       	cpi	r25, 0xFF	; 255
    173c:	81 f7       	brne	.-32     	; 0x171e <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s+0x14>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s+0x38>
			/*abnormal state occur.*/
			return false;
		}
		vals++;
	}
	return true;
    1740:	81 e0       	ldi	r24, 0x01	; 1
}
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	08 95       	ret

0000174c <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct>:
	{0xFF, 0xFF}
};

volatile unsigned char regs[256];

Ov7690::Ov7690(Io_Twi *io_twi, EDMA_CH_t *dma)
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	1f 92       	push	r1
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	7c 01       	movw	r14, r24
    1760:	da 01       	movw	r26, r20
{
	this->io_twi = io_twi;
    1762:	fc 01       	movw	r30, r24
    1764:	e3 57       	subi	r30, 0x73	; 115
    1766:	fd 4f       	sbci	r31, 0xFD	; 253
    1768:	60 83       	st	Z, r22
    176a:	71 83       	std	Z+1, r23	; 0x01
	this->dma = dma;
    176c:	fc 01       	movw	r30, r24
    176e:	40 83       	st	Z, r20
    1770:	51 83       	std	Z+1, r21	; 0x01
	/***** Setup PWDON *****/
	PORTR.DIRSET = 1 << 1;
    1772:	80 ee       	ldi	r24, 0xE0	; 224
    1774:	97 e0       	ldi	r25, 0x07	; 7
    1776:	22 e0       	ldi	r18, 0x02	; 2
    1778:	fc 01       	movw	r30, r24
    177a:	21 83       	std	Z+1, r18	; 0x01
	PORTR.OUTSET = 1 << 1;
    177c:	25 83       	std	Z+5, r18	; 0x05
	/***** Setup data lines *****/
	PORTA.DIRCLR = 0xFF;
    177e:	e0 e0       	ldi	r30, 0x00	; 0
    1780:	f6 e0       	ldi	r31, 0x06	; 6
    1782:	2f ef       	ldi	r18, 0xFF	; 255
    1784:	22 83       	std	Z+2, r18	; 0x02
	PORTA.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
    1786:	20 e1       	ldi	r18, 0x10	; 16
    1788:	20 8b       	std	Z+16, r18	; 0x10
	PORTA.PIN1CTRL = PORT_OPC_PULLDOWN_gc;
    178a:	21 8b       	std	Z+17, r18	; 0x11
	PORTA.PIN2CTRL = PORT_OPC_PULLDOWN_gc;
    178c:	22 8b       	std	Z+18, r18	; 0x12
	PORTA.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
    178e:	23 8b       	std	Z+19, r18	; 0x13
	PORTA.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    1790:	24 8b       	std	Z+20, r18	; 0x14
	PORTA.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    1792:	25 8b       	std	Z+21, r18	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    1794:	26 8b       	std	Z+22, r18	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    1796:	27 8b       	std	Z+23, r18	; 0x17
	/***** Setup of HREF to PC3 and VSYNC to PC2 *****/
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
    1798:	e0 e4       	ldi	r30, 0x40	; 64
    179a:	f6 e0       	ldi	r31, 0x06	; 6
    179c:	48 e1       	ldi	r20, 0x18	; 24
    179e:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_BOTHEDGES_gc;
    17a0:	43 8b       	std	Z+19, r20	; 0x13
	PORTC.DIRCLR = 1 << 2 | 1 << 3;
    17a2:	2c e0       	ldi	r18, 0x0C	; 12
    17a4:	22 83       	std	Z+2, r18	; 0x02
	PORTC.INTMASK = 1 << 2 | 1 << 3;
    17a6:	22 87       	std	Z+10, r18	; 0x0a
	PORTC.INTCTRL = PORT_INTLVL_HI_gc;
    17a8:	23 e0       	ldi	r18, 0x03	; 3
    17aa:	21 87       	std	Z+9, r18	; 0x09
	/***** Setup event system CH7 to take PCLK from pin D7 *****/
	PORTD.PIN7CTRL = PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc | PORT_INVEN_bm;
    17ac:	21 e5       	ldi	r18, 0x51	; 81
    17ae:	e0 e6       	ldi	r30, 0x60	; 96
    17b0:	f6 e0       	ldi	r31, 0x06	; 6
    17b2:	27 8b       	std	Z+23, r18	; 0x17
	EVSYS.CH0CTRL = 0;
    17b4:	e0 e8       	ldi	r30, 0x80	; 128
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN7_gc;
    17ba:	2f e6       	ldi	r18, 0x6F	; 111
    17bc:	20 83       	st	Z, r18
	/***** Setup of DMA *****/
	dma->CTRLA = EDMA_CH_SINGLE_bm;
    17be:	24 e0       	ldi	r18, 0x04	; 4
    17c0:	2c 93       	st	X, r18
	dma->TRFCNT = OV7690_BUFF_LEN * BYTES_PER_PIXEL;
    17c2:	20 e8       	ldi	r18, 0x80	; 128
    17c4:	32 e0       	ldi	r19, 0x02	; 2
    17c6:	16 96       	adiw	r26, 0x06	; 6
    17c8:	2d 93       	st	X+, r18
    17ca:	3c 93       	st	X, r19
    17cc:	17 97       	sbiw	r26, 0x07	; 7
	dma->ADDR = (unsigned int)&PORTA.IN;
    17ce:	28 e0       	ldi	r18, 0x08	; 8
    17d0:	36 e0       	ldi	r19, 0x06	; 6
    17d2:	18 96       	adiw	r26, 0x08	; 8
    17d4:	2d 93       	st	X+, r18
    17d6:	3c 93       	st	X, r19
    17d8:	19 97       	sbiw	r26, 0x09	; 9
	dma->ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_FIXED_gc;
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	1c 92       	st	X, r1
    17de:	12 97       	sbiw	r26, 0x02	; 2
	dma->DESTADDR = (unsigned int)buff1;
    17e0:	97 01       	movw	r18, r14
    17e2:	24 5f       	subi	r18, 0xF4	; 244
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	1c 96       	adiw	r26, 0x0c	; 12
    17e8:	2d 93       	st	X+, r18
    17ea:	3c 93       	st	X, r19
    17ec:	1d 97       	sbiw	r26, 0x0d	; 13
	dma->DESTADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    17ee:	21 e3       	ldi	r18, 0x31	; 49
    17f0:	13 96       	adiw	r26, 0x03	; 3
    17f2:	2c 93       	st	X, r18
    17f4:	13 97       	sbiw	r26, 0x03	; 3
	dma->TRIGSRC = EDMA_CH_TRIGSRC_EVSYS_CH0_gc;
    17f6:	31 e0       	ldi	r19, 0x01	; 1
    17f8:	14 96       	adiw	r26, 0x04	; 4
    17fa:	3c 93       	st	X, r19
	/***** Setup CLKper to PR0 pin *****/
	PORTR.DIRSET = 1 << 0;
    17fc:	dc 01       	movw	r26, r24
    17fe:	11 96       	adiw	r26, 0x01	; 1
    1800:	3c 93       	st	X, r19
    1802:	11 97       	sbiw	r26, 0x01	; 1
	PORTR.PIN0CTRL = PORT_OPC_PULLUP_gc;
    1804:	50 96       	adiw	r26, 0x10	; 16
    1806:	4c 93       	st	X, r20
	//PORTCFG.CLKOUT = PORTCFG_CLKOUTSEL_CLK4X_gc | PORTCFG_CLKOUT_PR0_gc;
	EVSYS.CH1CTRL = 0;
    1808:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH1MUX = EVSYS_CHMUX_PRESCALER_2_gc;
    180a:	81 e8       	ldi	r24, 0x81	; 129
    180c:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.ACEVOUT = PORTCFG_EVOUT_PR0_gc | PORTCFG_EVOUTSEL_1_gc;
    180e:	e0 eb       	ldi	r30, 0xB0	; 176
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	26 83       	std	Z+6, r18	; 0x06
    1814:	bf ef       	ldi	r27, 0xFF	; 255
    1816:	e3 ef       	ldi	r30, 0xF3	; 243
    1818:	f1 e0       	ldi	r31, 0x01	; 1
    181a:	b1 50       	subi	r27, 0x01	; 1
    181c:	e0 40       	sbci	r30, 0x00	; 0
    181e:	f0 40       	sbci	r31, 0x00	; 0
    1820:	e1 f7       	brne	.-8      	; 0x181a <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct+0xce>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct+0xd8>
    1824:	00 00       	nop
	_delay_ms(20);
	PORTR.OUTCLR = 1 << 1;
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	e0 ee       	ldi	r30, 0xE0	; 224
    182a:	f7 e0       	ldi	r31, 0x07	; 7
    182c:	86 83       	std	Z+6, r24	; 0x06

	/***** Setup Ov7690 *****/
	//detect();
	write_array(ov7690_Set);
    182e:	6c ea       	ldi	r22, 0xAC	; 172
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	c7 01       	movw	r24, r14
    1834:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZN6Ov769011write_arrayEPK20Ov7690_regval_list_s>
	//write_array(ov7690_res_qvga);
	//set_window(0x11 << 3, 0x61 << 3, 0x03 << 2, 0x7B << 2);
	unsigned int cnt = 0;
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
	for (; cnt < 256; cnt++)
	{
		regs[cnt] = 0;
    183c:	f9 01       	movw	r30, r18
    183e:	e8 5c       	subi	r30, 0xC8	; 200
    1840:	fa 4d       	sbci	r31, 0xDA	; 218
    1842:	10 82       	st	Z, r1
	//detect();
	write_array(ov7690_Set);
	//write_array(ov7690_res_qvga);
	//set_window(0x11 << 3, 0x61 << 3, 0x03 << 2, 0x7B << 2);
	unsigned int cnt = 0;
	for (; cnt < 256; cnt++)
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	21 15       	cp	r18, r1
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	38 07       	cpc	r19, r24
    184e:	b1 f7       	brne	.-20     	; 0x183c <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct+0xf0>
    1850:	00 e0       	ldi	r16, 0x00	; 0
    1852:	10 e0       	ldi	r17, 0x00	; 0
	{
		regs[cnt] = 0;
	}
	for (cnt = 0; cnt < 256; cnt++)
	{
		unsigned char v = 0;	
    1854:	19 82       	std	Y+1, r1	; 0x01
		reg_read(cnt, &v);
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5f       	subi	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	60 2f       	mov	r22, r16
    185e:	c7 01       	movw	r24, r14
    1860:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN6Ov76908reg_readEhPh>
		regs[cnt] = v;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	f8 01       	movw	r30, r16
    1868:	e8 5c       	subi	r30, 0xC8	; 200
    186a:	fa 4d       	sbci	r31, 0xDA	; 218
    186c:	80 83       	st	Z, r24
	unsigned int cnt = 0;
	for (; cnt < 256; cnt++)
	{
		regs[cnt] = 0;
	}
	for (cnt = 0; cnt < 256; cnt++)
    186e:	0f 5f       	subi	r16, 0xFF	; 255
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	01 15       	cp	r16, r1
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	19 07       	cpc	r17, r25
    1878:	69 f7       	brne	.-38     	; 0x1854 <_ZN6Ov7690C1EP6Io_TwiP14EDMA_CH_struct+0x108>
	{
		unsigned char v = 0;	
		reg_read(cnt, &v);
		regs[cnt] = v;
	}
}
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	08 95       	ret

0000188a <__vector_9>:
	}

}

ISR(PORTC_INT_vect)
{
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	af 93       	push	r26
    189a:	bf 93       	push	r27
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
	if(PORTC.INTFLAGS & 1 << 3)
    18a0:	e0 e4       	ldi	r30, 0x40	; 64
    18a2:	f6 e0       	ldi	r31, 0x06	; 6
    18a4:	84 85       	ldd	r24, Z+12	; 0x0c
    18a6:	83 ff       	sbrs	r24, 3
    18a8:	19 c0       	rjmp	.+50     	; 0x18dc <__vector_9+0x52>
	{
		PORTC.INTFLAGS = 1 << 3;
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	84 87       	std	Z+12, r24	; 0x0c
		if((PORTC.IN) & 1 << 3)
    18ae:	80 85       	ldd	r24, Z+8	; 0x08
    18b0:	83 ff       	sbrs	r24, 3
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <__vector_9+0x52>
		{
			ov7690.buffer_change_count++;
    18b4:	e7 e2       	ldi	r30, 0x27	; 39
    18b6:	f2 e2       	ldi	r31, 0x22	; 34
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	a2 81       	ldd	r26, Z+2	; 0x02
    18be:	b3 81       	ldd	r27, Z+3	; 0x03
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	a1 1d       	adc	r26, r1
    18c4:	b1 1d       	adc	r27, r1
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
			ov7690.dma->CTRLA |= EDMA_CH_ENABLE_bm;
    18ce:	e0 91 25 22 	lds	r30, 0x2225
    18d2:	f0 91 26 22 	lds	r31, 0x2226
    18d6:	80 81       	ld	r24, Z
    18d8:	80 68       	ori	r24, 0x80	; 128
    18da:	80 83       	st	Z, r24
		}
	}
	if(PORTC.INTFLAGS & 1 << 2)
    18dc:	e0 e4       	ldi	r30, 0x40	; 64
    18de:	f6 e0       	ldi	r31, 0x06	; 6
    18e0:	84 85       	ldd	r24, Z+12	; 0x0c
    18e2:	82 ff       	sbrs	r24, 2
    18e4:	12 c0       	rjmp	.+36     	; 0x190a <__vector_9+0x80>
	{
		PORTC.INTFLAGS = 1 << 2;
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	84 87       	std	Z+12, r24	; 0x0c
		if((~PORTC.IN) & 1 << 2/* && line_cnt == 0*/)
    18ea:	80 85       	ldd	r24, Z+8	; 0x08
    18ec:	82 fd       	sbrc	r24, 2
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <__vector_9+0x80>
		{
			ov7690.frame_count++;
    18f0:	eb e2       	ldi	r30, 0x2B	; 43
    18f2:	f2 e2       	ldi	r31, 0x22	; 34
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	a2 81       	ldd	r26, Z+2	; 0x02
    18fa:	b3 81       	ldd	r27, Z+3	; 0x03
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	a1 1d       	adc	r26, r1
    1900:	b1 1d       	adc	r27, r1
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <_ZN2PmC1Ev>:
//#define CALIBRATION 0x0A0C
#define CALIBRATION 0x0D28

Pm::Pm()
{
	OSC.CTRL |= OSC_RC32MEN_bm;
    1920:	e0 e5       	ldi	r30, 0x50	; 80
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	80 83       	st	Z, r24
	DFLLRC32M.CALA = CALIBRATION;
    192a:	e0 e6       	ldi	r30, 0x60	; 96
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	88 e2       	ldi	r24, 0x28	; 40
    1930:	82 83       	std	Z+2, r24	; 0x02
	DFLLRC32M.CALB = CALIBRATION >> 8;
    1932:	8d e0       	ldi	r24, 0x0D	; 13
    1934:	83 83       	std	Z+3, r24	; 0x03
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    1936:	e0 e5       	ldi	r30, 0x50	; 80
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	81 81       	ldd	r24, Z+1	; 0x01
    193c:	81 ff       	sbrs	r24, 1
    193e:	fd cf       	rjmp	.-6      	; 0x193a <_ZN2PmC1Ev+0x1a>
	PROTECTED_WRITE(CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	88 ed       	ldi	r24, 0xD8	; 216
    1944:	84 bf       	out	0x34, r24	; 52
    1946:	90 93 40 00 	sts	0x0040, r25
	FCPU = 32000000;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	98 e4       	ldi	r25, 0x48	; 72
    194e:	a8 ee       	ldi	r26, 0xE8	; 232
    1950:	b1 e0       	ldi	r27, 0x01	; 1
    1952:	80 93 06 20 	sts	0x2006, r24
    1956:	90 93 07 20 	sts	0x2007, r25
    195a:	a0 93 08 20 	sts	0x2008, r26
    195e:	b0 93 09 20 	sts	0x2009, r27
	unsigned char pmic_reg = PMIC.CTRL;
    1962:	e0 ea       	ldi	r30, 0xA0	; 160
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	92 81       	ldd	r25, Z+2	; 0x02
	pmic_reg |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1968:	97 60       	ori	r25, 0x07	; 7
	PROTECTED_WRITE(PMIC.CTRL, pmic_reg);
    196a:	88 ed       	ldi	r24, 0xD8	; 216
    196c:	84 bf       	out	0x34, r24	; 52
    196e:	90 93 a2 00 	sts	0x00A2, r25
	asm("sei");
    1972:	78 94       	sei
    1974:	08 95       	ret

00001976 <__udivmodsi4>:
    1976:	a1 e2       	ldi	r26, 0x21	; 33
    1978:	1a 2e       	mov	r1, r26
    197a:	aa 1b       	sub	r26, r26
    197c:	bb 1b       	sub	r27, r27
    197e:	fd 01       	movw	r30, r26
    1980:	0d c0       	rjmp	.+26     	; 0x199c <__udivmodsi4_ep>

00001982 <__udivmodsi4_loop>:
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	ee 1f       	adc	r30, r30
    1988:	ff 1f       	adc	r31, r31
    198a:	a2 17       	cp	r26, r18
    198c:	b3 07       	cpc	r27, r19
    198e:	e4 07       	cpc	r30, r20
    1990:	f5 07       	cpc	r31, r21
    1992:	20 f0       	brcs	.+8      	; 0x199c <__udivmodsi4_ep>
    1994:	a2 1b       	sub	r26, r18
    1996:	b3 0b       	sbc	r27, r19
    1998:	e4 0b       	sbc	r30, r20
    199a:	f5 0b       	sbc	r31, r21

0000199c <__udivmodsi4_ep>:
    199c:	66 1f       	adc	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	1a 94       	dec	r1
    19a6:	69 f7       	brne	.-38     	; 0x1982 <__udivmodsi4_loop>
    19a8:	60 95       	com	r22
    19aa:	70 95       	com	r23
    19ac:	80 95       	com	r24
    19ae:	90 95       	com	r25
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	bd 01       	movw	r22, r26
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret

000019ba <__tablejump2__>:
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31

000019be <__tablejump__>:
    19be:	05 90       	lpm	r0, Z+
    19c0:	f4 91       	lpm	r31, Z
    19c2:	e0 2d       	mov	r30, r0
    19c4:	09 94       	ijmp

000019c6 <__umulhisi3>:
    19c6:	a2 9f       	mul	r26, r18
    19c8:	b0 01       	movw	r22, r0
    19ca:	b3 9f       	mul	r27, r19
    19cc:	c0 01       	movw	r24, r0
    19ce:	a3 9f       	mul	r26, r19
    19d0:	70 0d       	add	r23, r0
    19d2:	81 1d       	adc	r24, r1
    19d4:	11 24       	eor	r1, r1
    19d6:	91 1d       	adc	r25, r1
    19d8:	b2 9f       	mul	r27, r18
    19da:	70 0d       	add	r23, r0
    19dc:	81 1d       	adc	r24, r1
    19de:	11 24       	eor	r1, r1
    19e0:	91 1d       	adc	r25, r1
    19e2:	08 95       	ret

000019e4 <malloc>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	82 30       	cpi	r24, 0x02	; 2
    19ea:	91 05       	cpc	r25, r1
    19ec:	10 f4       	brcc	.+4      	; 0x19f2 <malloc+0xe>
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	e0 91 3a 26 	lds	r30, 0x263A
    19f6:	f0 91 3b 26 	lds	r31, 0x263B
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	a0 e0       	ldi	r26, 0x00	; 0
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	39 f1       	breq	.+78     	; 0x1a54 <malloc+0x70>
    1a06:	40 81       	ld	r20, Z
    1a08:	51 81       	ldd	r21, Z+1	; 0x01
    1a0a:	48 17       	cp	r20, r24
    1a0c:	59 07       	cpc	r21, r25
    1a0e:	b8 f0       	brcs	.+46     	; 0x1a3e <malloc+0x5a>
    1a10:	48 17       	cp	r20, r24
    1a12:	59 07       	cpc	r21, r25
    1a14:	71 f4       	brne	.+28     	; 0x1a32 <malloc+0x4e>
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	10 97       	sbiw	r26, 0x00	; 0
    1a1c:	29 f0       	breq	.+10     	; 0x1a28 <malloc+0x44>
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	8d 93       	st	X+, r24
    1a22:	9c 93       	st	X, r25
    1a24:	13 97       	sbiw	r26, 0x03	; 3
    1a26:	2c c0       	rjmp	.+88     	; 0x1a80 <malloc+0x9c>
    1a28:	80 93 3a 26 	sts	0x263A, r24
    1a2c:	90 93 3b 26 	sts	0x263B, r25
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <malloc+0x9c>
    1a32:	21 15       	cp	r18, r1
    1a34:	31 05       	cpc	r19, r1
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <malloc+0x60>
    1a38:	42 17       	cp	r20, r18
    1a3a:	53 07       	cpc	r21, r19
    1a3c:	18 f0       	brcs	.+6      	; 0x1a44 <malloc+0x60>
    1a3e:	a9 01       	movw	r20, r18
    1a40:	db 01       	movw	r26, r22
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <malloc+0x62>
    1a44:	ef 01       	movw	r28, r30
    1a46:	9a 01       	movw	r18, r20
    1a48:	bd 01       	movw	r22, r26
    1a4a:	df 01       	movw	r26, r30
    1a4c:	02 80       	ldd	r0, Z+2	; 0x02
    1a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a50:	e0 2d       	mov	r30, r0
    1a52:	d7 cf       	rjmp	.-82     	; 0x1a02 <malloc+0x1e>
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	f9 f0       	breq	.+62     	; 0x1a98 <malloc+0xb4>
    1a5a:	28 1b       	sub	r18, r24
    1a5c:	39 0b       	sbc	r19, r25
    1a5e:	24 30       	cpi	r18, 0x04	; 4
    1a60:	31 05       	cpc	r19, r1
    1a62:	80 f4       	brcc	.+32     	; 0x1a84 <malloc+0xa0>
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	61 15       	cp	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <malloc+0x92>
    1a6e:	fb 01       	movw	r30, r22
    1a70:	82 83       	std	Z+2, r24	; 0x02
    1a72:	93 83       	std	Z+3, r25	; 0x03
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <malloc+0x9a>
    1a76:	80 93 3a 26 	sts	0x263A, r24
    1a7a:	90 93 3b 26 	sts	0x263B, r25
    1a7e:	fe 01       	movw	r30, r28
    1a80:	32 96       	adiw	r30, 0x02	; 2
    1a82:	44 c0       	rjmp	.+136    	; 0x1b0c <malloc+0x128>
    1a84:	fe 01       	movw	r30, r28
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	81 93       	st	Z+, r24
    1a8c:	91 93       	st	Z+, r25
    1a8e:	22 50       	subi	r18, 0x02	; 2
    1a90:	31 09       	sbc	r19, r1
    1a92:	28 83       	st	Y, r18
    1a94:	39 83       	std	Y+1, r19	; 0x01
    1a96:	3a c0       	rjmp	.+116    	; 0x1b0c <malloc+0x128>
    1a98:	20 91 38 26 	lds	r18, 0x2638
    1a9c:	30 91 39 26 	lds	r19, 0x2639
    1aa0:	23 2b       	or	r18, r19
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <malloc+0xd0>
    1aa4:	20 91 02 20 	lds	r18, 0x2002
    1aa8:	30 91 03 20 	lds	r19, 0x2003
    1aac:	20 93 38 26 	sts	0x2638, r18
    1ab0:	30 93 39 26 	sts	0x2639, r19
    1ab4:	20 91 00 20 	lds	r18, 0x2000
    1ab8:	30 91 01 20 	lds	r19, 0x2001
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	41 f4       	brne	.+16     	; 0x1ad2 <malloc+0xee>
    1ac2:	2d b7       	in	r18, 0x3d	; 61
    1ac4:	3e b7       	in	r19, 0x3e	; 62
    1ac6:	40 91 04 20 	lds	r20, 0x2004
    1aca:	50 91 05 20 	lds	r21, 0x2005
    1ace:	24 1b       	sub	r18, r20
    1ad0:	35 0b       	sbc	r19, r21
    1ad2:	e0 91 38 26 	lds	r30, 0x2638
    1ad6:	f0 91 39 26 	lds	r31, 0x2639
    1ada:	e2 17       	cp	r30, r18
    1adc:	f3 07       	cpc	r31, r19
    1ade:	a0 f4       	brcc	.+40     	; 0x1b08 <malloc+0x124>
    1ae0:	2e 1b       	sub	r18, r30
    1ae2:	3f 0b       	sbc	r19, r31
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	78 f0       	brcs	.+30     	; 0x1b08 <malloc+0x124>
    1aea:	ac 01       	movw	r20, r24
    1aec:	4e 5f       	subi	r20, 0xFE	; 254
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	24 17       	cp	r18, r20
    1af2:	35 07       	cpc	r19, r21
    1af4:	48 f0       	brcs	.+18     	; 0x1b08 <malloc+0x124>
    1af6:	4e 0f       	add	r20, r30
    1af8:	5f 1f       	adc	r21, r31
    1afa:	40 93 38 26 	sts	0x2638, r20
    1afe:	50 93 39 26 	sts	0x2639, r21
    1b02:	81 93       	st	Z+, r24
    1b04:	91 93       	st	Z+, r25
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <malloc+0x128>
    1b08:	e0 e0       	ldi	r30, 0x00	; 0
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <free>:
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <free+0xa>
    1b1c:	87 c0       	rjmp	.+270    	; 0x1c2c <free+0x118>
    1b1e:	fc 01       	movw	r30, r24
    1b20:	32 97       	sbiw	r30, 0x02	; 2
    1b22:	12 82       	std	Z+2, r1	; 0x02
    1b24:	13 82       	std	Z+3, r1	; 0x03
    1b26:	c0 91 3a 26 	lds	r28, 0x263A
    1b2a:	d0 91 3b 26 	lds	r29, 0x263B
    1b2e:	20 97       	sbiw	r28, 0x00	; 0
    1b30:	81 f4       	brne	.+32     	; 0x1b52 <free+0x3e>
    1b32:	20 81       	ld	r18, Z
    1b34:	31 81       	ldd	r19, Z+1	; 0x01
    1b36:	28 0f       	add	r18, r24
    1b38:	39 1f       	adc	r19, r25
    1b3a:	80 91 38 26 	lds	r24, 0x2638
    1b3e:	90 91 39 26 	lds	r25, 0x2639
    1b42:	82 17       	cp	r24, r18
    1b44:	93 07       	cpc	r25, r19
    1b46:	79 f5       	brne	.+94     	; 0x1ba6 <free+0x92>
    1b48:	e0 93 38 26 	sts	0x2638, r30
    1b4c:	f0 93 39 26 	sts	0x2639, r31
    1b50:	6d c0       	rjmp	.+218    	; 0x1c2c <free+0x118>
    1b52:	de 01       	movw	r26, r28
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	ae 17       	cp	r26, r30
    1b5a:	bf 07       	cpc	r27, r31
    1b5c:	50 f4       	brcc	.+20     	; 0x1b72 <free+0x5e>
    1b5e:	12 96       	adiw	r26, 0x02	; 2
    1b60:	4d 91       	ld	r20, X+
    1b62:	5c 91       	ld	r21, X
    1b64:	13 97       	sbiw	r26, 0x03	; 3
    1b66:	9d 01       	movw	r18, r26
    1b68:	41 15       	cp	r20, r1
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	09 f1       	breq	.+66     	; 0x1bb0 <free+0x9c>
    1b6e:	da 01       	movw	r26, r20
    1b70:	f3 cf       	rjmp	.-26     	; 0x1b58 <free+0x44>
    1b72:	a2 83       	std	Z+2, r26	; 0x02
    1b74:	b3 83       	std	Z+3, r27	; 0x03
    1b76:	40 81       	ld	r20, Z
    1b78:	51 81       	ldd	r21, Z+1	; 0x01
    1b7a:	84 0f       	add	r24, r20
    1b7c:	95 1f       	adc	r25, r21
    1b7e:	8a 17       	cp	r24, r26
    1b80:	9b 07       	cpc	r25, r27
    1b82:	71 f4       	brne	.+28     	; 0x1ba0 <free+0x8c>
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	11 97       	sbiw	r26, 0x01	; 1
    1b8a:	84 0f       	add	r24, r20
    1b8c:	95 1f       	adc	r25, r21
    1b8e:	02 96       	adiw	r24, 0x02	; 2
    1b90:	80 83       	st	Z, r24
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	12 96       	adiw	r26, 0x02	; 2
    1b96:	8d 91       	ld	r24, X+
    1b98:	9c 91       	ld	r25, X
    1b9a:	13 97       	sbiw	r26, 0x03	; 3
    1b9c:	82 83       	std	Z+2, r24	; 0x02
    1b9e:	93 83       	std	Z+3, r25	; 0x03
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <free+0x9c>
    1ba6:	e0 93 3a 26 	sts	0x263A, r30
    1baa:	f0 93 3b 26 	sts	0x263B, r31
    1bae:	3e c0       	rjmp	.+124    	; 0x1c2c <free+0x118>
    1bb0:	d9 01       	movw	r26, r18
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	ed 93       	st	X+, r30
    1bb6:	fc 93       	st	X, r31
    1bb8:	13 97       	sbiw	r26, 0x03	; 3
    1bba:	4d 91       	ld	r20, X+
    1bbc:	5d 91       	ld	r21, X+
    1bbe:	a4 0f       	add	r26, r20
    1bc0:	b5 1f       	adc	r27, r21
    1bc2:	ea 17       	cp	r30, r26
    1bc4:	fb 07       	cpc	r31, r27
    1bc6:	79 f4       	brne	.+30     	; 0x1be6 <free+0xd2>
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	84 0f       	add	r24, r20
    1bce:	95 1f       	adc	r25, r21
    1bd0:	02 96       	adiw	r24, 0x02	; 2
    1bd2:	d9 01       	movw	r26, r18
    1bd4:	8d 93       	st	X+, r24
    1bd6:	9c 93       	st	X, r25
    1bd8:	11 97       	sbiw	r26, 0x01	; 1
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	12 96       	adiw	r26, 0x02	; 2
    1be0:	8d 93       	st	X+, r24
    1be2:	9c 93       	st	X, r25
    1be4:	13 97       	sbiw	r26, 0x03	; 3
    1be6:	e0 e0       	ldi	r30, 0x00	; 0
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <free+0xe4>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	ec 01       	movw	r28, r24
    1bf6:	f9 cf       	rjmp	.-14     	; 0x1bea <free+0xd6>
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	02 96       	adiw	r24, 0x02	; 2
    1bfc:	28 81       	ld	r18, Y
    1bfe:	39 81       	ldd	r19, Y+1	; 0x01
    1c00:	82 0f       	add	r24, r18
    1c02:	93 1f       	adc	r25, r19
    1c04:	20 91 38 26 	lds	r18, 0x2638
    1c08:	30 91 39 26 	lds	r19, 0x2639
    1c0c:	28 17       	cp	r18, r24
    1c0e:	39 07       	cpc	r19, r25
    1c10:	69 f4       	brne	.+26     	; 0x1c2c <free+0x118>
    1c12:	30 97       	sbiw	r30, 0x00	; 0
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <free+0x10c>
    1c16:	10 92 3a 26 	sts	0x263A, r1
    1c1a:	10 92 3b 26 	sts	0x263B, r1
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <free+0x110>
    1c20:	12 82       	std	Z+2, r1	; 0x02
    1c22:	13 82       	std	Z+3, r1	; 0x03
    1c24:	c0 93 38 26 	sts	0x2638, r28
    1c28:	d0 93 39 26 	sts	0x2639, r29
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <__do_global_dtors>:
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	c8 eb       	ldi	r28, 0xB8	; 184
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <__do_global_dtors+0x10>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	0e 94 df 0c 	call	0x19be	; 0x19be <__tablejump__>
    1c40:	22 96       	adiw	r28, 0x02	; 2
    1c42:	ca 3b       	cpi	r28, 0xBA	; 186
    1c44:	d1 07       	cpc	r29, r17
    1c46:	c9 f7       	brne	.-14     	; 0x1c3a <__do_global_dtors+0x8>
    1c48:	f8 94       	cli

00001c4a <__stop_program>:
    1c4a:	ff cf       	rjmp	.-2      	; 0x1c4a <__stop_program>
